"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _default;

var _constants = _interopRequireDefault(require("../../../constants"));

var _Common = _interopRequireDefault(require("../../Common"));

var _Modularizer = _interopRequireDefault(require("./Modularizer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/***************************
 *
 * Module methods
 *
 **************************/
function _default(CLI) {
  /**
   * Install / Update a module
   */
  CLI.prototype.install = function (module_name, opts, cb) {
    var that = this;

    if (typeof opts == 'function') {
      cb = opts;
      opts = {};
    }

    _Modularizer["default"].install(this, module_name, opts, function (err, data) {
      if (err) {
        _Common["default"].printError(_constants["default"].PREFIX_MSG_ERR + (err.message || err));

        return cb ? cb(_Common["default"].retErr(err)) : that.speedList(_constants["default"].ERROR_EXIT);
      }

      return cb ? cb(null, data) : that.speedList(_constants["default"].SUCCESS_EXIT);
    });
  };
  /**
   * Uninstall a module
   */


  CLI.prototype.uninstall = function (module_name, cb) {
    var that = this;

    _Modularizer["default"].uninstall(this, module_name, function (err, data) {
      if (err) return cb ? cb(_Common["default"].retErr(err)) : that.speedList(_constants["default"].ERROR_EXIT);
      return cb ? cb(null, data) : that.speedList(_constants["default"].SUCCESS_EXIT);
    });
  };

  CLI.prototype.launchAll = function (CLI, cb) {
    _Modularizer["default"].launchModules(CLI, cb);
  };

  CLI.prototype["package"] = function (module_path, cb) {
    var _this = this;

    _Modularizer["default"]["package"](this, module_path, function (err, res) {
      if (err) {
        _Common["default"].errMod(err);

        return cb ? cb(err) : _this.exitCli(1);
      }

      _Common["default"].logMod("Module packaged in ".concat(res.path));

      return cb ? cb(err) : _this.exitCli(0);
    });
  };
  /**
   * Publish module on NPM + Git push
   */


  CLI.prototype.publish = function (folder, opts, cb) {
    var that = this;

    _Modularizer["default"].publish(this, folder, opts, function (err, data) {
      if (err) return cb ? cb(_Common["default"].retErr(err)) : that.speedList(_constants["default"].ERROR_EXIT);
      return cb ? cb(null, data) : that.speedList(_constants["default"].SUCCESS_EXIT);
    });
  };
  /**
   * Publish module on NPM + Git push
   */


  CLI.prototype.generateModuleSample = function (app_name, cb) {
    var that = this;

    _Modularizer["default"].generateSample(app_name, function (err, data) {
      if (err) return cb ? cb(_Common["default"].retErr(err)) : that.exitCli(_constants["default"].ERROR_EXIT);
      return cb ? cb(null, data) : that.exitCli(_constants["default"].SUCCESS_EXIT);
    });
  };
  /**
   * Special delete method
   */


  CLI.prototype.deleteModule = function (module_name, cb) {
    var that = this;
    var found_proc = [];
    this.Client.getAllProcess(function (err, procs) {
      if (err) {
        _Common["default"].printError('Error retrieving process list: ' + err);

        return cb(_Common["default"].retErr(err));
      }

      procs.forEach(function (proc) {
        if (proc.pm2_env.name == module_name && proc.pm2_env.pmx_module) {
          found_proc.push(proc.pm_id);
        }
      });
      if (found_proc.length == 0) return cb();

      that._operate('deleteProcessId', found_proc[0], function (err) {
        if (err) return cb(_Common["default"].retErr(err));

        _Common["default"].printOut('In memory process deleted');

        return cb();
      });
    });
  };
}

;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,