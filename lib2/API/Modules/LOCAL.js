"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _path = _interopRequireDefault(require("path"));

var _child_process = require("child_process");

var _chalk = _interopRequireDefault(require("chalk"));

var _parallel = _interopRequireDefault(require("async/parallel"));

var _constants = _interopRequireDefault(require("../../../constants"));

var _Common = _interopRequireDefault(require("../../Common"));

var INTERNAL_MODULES = {
  'deep-monitoring': {
    dependencies: [{
      name: 'v8-profiler-node8'
    }, {
      name: 'gc-stats'
    }, {
      name: 'event-loop-inspector'
    }]
  },
  'gc-stats': {
    name: 'gc-stats'
  },
  'event-loop-inspector': {
    name: 'event-loop-inspector'
  },
  'v8-profiler': {
    name: 'v8-profiler-node8'
  },
  'profiler': {
    name: 'v8-profiler-node8'
  },
  'typescript': {
    dependencies: [{
      name: 'typescript'
    }, {
      name: 'ts-node@latest'
    }]
  },
  'livescript': {
    name: 'livescript'
  },
  'coffee-script': {
    name: 'coffee-script',
    message: 'Coffeescript v1 support'
  },
  'coffeescript': {
    name: 'coffeescript',
    message: 'Coffeescript v2 support'
  }
};

function install(module, cb, verbose) {
  if (!module || !module.name || module.name.length === 0) {
    return cb(new Error('No module name !'));
  }

  if (typeof verbose === 'undefined') {
    verbose = true;
  }

  installLangModule(module.name, function (err) {
    var display = module.message || module.name;

    if (err) {
      if (verbose) {
        _Common["default"].printError(_constants["default"].PREFIX_MSG_MOD_ERR + _chalk["default"].bold.green(display + ' installation has FAILED (checkout previous logs)'));
      }

      return cb(err);
    }

    if (verbose) {
      _Common["default"].printOut(_constants["default"].PREFIX_MSG + _chalk["default"].bold.green(display + ' ENABLED'));
    }

    return cb();
  });
}

function installMultipleModules(modules, cb, post_install) {
  var functionList = [];

  for (var i = 0; i < modules.length; i++) {
    functionList.push(function (index) {
      return function (callback) {
        var module = modules[index];

        if (typeof modules[index] === 'string') {
          module = {
            name: modules[index]
          };
        }

        install(module, function ($post_install, err, $index, $modules) {
          try {
            var install_instance = (0, _child_process.spawn)(post_install[modules[index]], {
              stdio: 'inherit',
              env: process.env,
              shell: true,
              cwd: process.cwd()
            });

            _Common["default"].printOut(_constants["default"].PREFIX_MSG_MOD + 'Running configuraton script.');
          } catch (e) {
            _Common["default"].printOut(_constants["default"].PREFIX_MSG_MOD + 'No configuraton script found.');
          }

          callback(null, {
            module: module,
            err: err
          });
        }, false);
      };
    }(i));
  }

  (0, _parallel["default"])(functionList, function (err, results) {
    for (var i = 0; i < results.length; i++) {
      var display = results[i].module.message || results[i].module.name;

      if (results[i].err) {
        err = results[i].err;

        _Common["default"].printError(_constants["default"].PREFIX_MSG_MOD_ERR + _chalk["default"].bold.green(display + ' installation has FAILED (checkout previous logs)'));
      } else {
        _Common["default"].printOut(_constants["default"].PREFIX_MSG + _chalk["default"].bold.green(display + ' ENABLED'));
      }
    }

    if (cb) cb(err);
  });
}

;

function installLangModule(module_name, cb) {
  var node_module_path = _path["default"].resolve(_path["default"].join(__dirname, '../../../'));

  _Common["default"].printOut(_constants["default"].PREFIX_MSG_MOD + 'Calling ' + _chalk["default"].bold.red('[NPM]') + ' to install ' + module_name + ' ...');

  var install_instance = (0, _child_process.spawn)(_constants["default"].IS_WINDOWS ? 'npm.cmd' : 'npm', ['install', module_name, '--loglevel=error'], {
    stdio: 'inherit',
    env: process.env,
    shell: true,
    cwd: node_module_path
  });
  install_instance.on('close', function (code) {
    if (code > 0) return cb(new Error('Module install failed'));
    return cb(null);
  });
  install_instance.on('error', function (err) {
    console.error(err.stack || err);
  });
}

;
var _default = {
  install: install,
  INTERNAL_MODULES: INTERNAL_MODULES,
  installMultipleModules: installMultipleModules
};
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,