"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _eachLimit = _interopRequireDefault(require("async/eachLimit"));

var _forEachLimit = _interopRequireDefault(require("async/forEachLimit"));

var _Configuration = _interopRequireDefault(require("../../Configuration"));

var _constants = _interopRequireDefault(require("../../../constants"));

var _Common = _interopRequireDefault(require("../../Common"));

var _NPM = _interopRequireDefault(require("./NPM"));

var _TAR = _interopRequireDefault(require("./TAR"));

var _LOCAL = _interopRequireDefault(require("./LOCAL"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * Copyright 2013 the PM2 project authors. All rights reserved.
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */
var Modularizer = {};
/**
 * PM2 Module System.
 */

Modularizer.install = function (CLI, module_name, opts, cb) {
  module_name = module_name.replace(/[;`|]/g, "");

  if (typeof opts == 'function') {
    cb = opts;
    opts = {};
  }

  if (_LOCAL["default"].INTERNAL_MODULES.hasOwnProperty(module_name)) {
    _Common["default"].logMod("Adding dependency ".concat(module_name, " to PM2 Runtime"));

    var currentModule = _LOCAL["default"].INTERNAL_MODULES[module_name];

    if (currentModule && currentModule.hasOwnProperty('dependencies')) {
      _LOCAL["default"].installMultipleModules(currentModule.dependencies, cb);
    } else {
      _LOCAL["default"].install(currentModule, cb);
    }
  } else if (module_name == '.') {
    _Common["default"].logMod("Installing local NPM module");

    return _NPM["default"].localStart(CLI, opts, cb);
  } else if (opts.tarball || /\.tar\.gz$/i.test(module_name)) {
    _Common["default"].logMod("Installing TAR module");

    _TAR["default"].install(CLI, module_name, opts, cb);
  } else {
    _Common["default"].logMod("Installing NPM ".concat(module_name, " module"));

    _NPM["default"].install(CLI, module_name, opts, cb);
  }
};
/**
 * Launch All Modules
 * Used PM2 at startup
 */


Modularizer.launchModules = function (CLI, cb) {
  var modules = Modularizer.listModules();
  if (!modules) return cb(); // 1#

  function launchNPMModules(cb) {
    if (!modules.npm_modules) return launchTARModules(cb);
    (0, _eachLimit["default"])(Object.keys(modules.npm_modules), 1, function (module_name, next) {
      _NPM["default"].start(CLI, modules, module_name, next);
    }, function () {
      launchTARModules(cb);
    });
  } // 2#


  function launchTARModules(cb) {
    if (!modules.tar_modules) return cb();
    (0, _eachLimit["default"])(Object.keys(modules.tar_modules), 1, function (module_name, next) {
      _TAR["default"].start(CLI, module_name, next);
    }, function () {
      return cb ? cb(null) : false;
    });
  }

  launchNPMModules(cb);
};

Modularizer["package"] = function (CLI, module_path, cb) {
  var fullpath = process.cwd();
  if (module_path) fullpath = require('path').resolve(module_path);

  _TAR["default"].package1(fullpath, process.cwd(), cb);
};
/**
 * Uninstall module
 */


Modularizer.uninstall = function (CLI, module_name, cb) {
  _Common["default"].printOut(_constants["default"].PREFIX_MSG_MOD + 'Uninstalling module ' + module_name);

  var modules_list = Modularizer.listModules();

  if (module_name == 'all') {
    if (!modules_list) return cb();
    return (0, _forEachLimit["default"])(Object.keys(modules_list.npm_modules), 1, function (module_name, next) {
      _NPM["default"].uninstall(CLI, module_name, next);
    }, function () {
      (0, _forEachLimit["default"])(Object.keys(modules_list.tar_modules), 1, function (module_name, next) {
        _TAR["default"].uninstall(CLI, module_name, next);
      }, cb);
    });
  }

  if (modules_list.npm_modules[module_name]) {
    _NPM["default"].uninstall(CLI, module_name, cb);
  } else if (modules_list.tar_modules[module_name]) {
    _TAR["default"].uninstall(CLI, module_name, cb);
  } else {
    _Common["default"].errMod('Unknown module');

    CLI.exitCli(1);
  }
};
/**
 * List modules based on modules present in ~/.pm2/modules/ folder
 */


Modularizer.listModules = function () {
  return {
    npm_modules: _Configuration["default"].getSync(_constants["default"].MODULE_CONF_PREFIX) || {},
    tar_modules: _Configuration["default"].getSync(_constants["default"].MODULE_CONF_PREFIX_TAR) || {}
  };
};

Modularizer.getAdditionalConf = function (app_name) {
  return _NPM["default"].getModuleConf(app_name);
};

Modularizer.publish = function (PM2, folder, opts, cb) {
  if (opts.npm == true) {
    _NPM["default"].publish(opts, cb);
  } else {
    _TAR["default"].publish(PM2, folder, cb);
  }
};

Modularizer.generateSample = function (app_name, cb) {
  _NPM["default"].generateSample(app_name, cb);
};

var _default = Modularizer;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,