"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _default;

var _constants = _interopRequireDefault(require("../../../constants"));

var _Common = _interopRequireDefault(require("../../Common"));

var _Configuration = _interopRequireDefault(require("../../Configuration"));

var _helpers = _interopRequireDefault(require("./helpers"));

var _chalk = _interopRequireDefault(require("chalk"));

var _cliTableau = _interopRequireDefault(require("cli-tableau"));

var _passwd = _interopRequireDefault(require("../../tools/passwd"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var List = {};
var CONDENSED_MODE = (process.stdout.columns || 300) < 120;
/**
 * Check if dump file contains same apps that the one managed by PM2
 */

function checkIfProcessAreDumped(list) {
  try {
    var dump_raw = require('fs').readFileSync(_constants["default"].DUMP_FILE_PATH);

    var dump = JSON.parse(dump_raw);
    var apps_dumped = dump.map(function (proc) {
      return proc.name;
    });
    var apps_running = list.filter(function (proc) {
      return proc.pm2_env.pmx_module != true;
    }).map(function (proc) {
      return proc.name;
    });
    var diff = apps_dumped.filter(function (a) {
      return !apps_running.includes(a);
    });

    if (diff.length > 0) {
      _Common["default"].printOut("Current process list running is not in sync with saved list. ".concat(_chalk["default"].italic(diff.join(' ')), " differs. Type 'pm2 save' to synchronize."));
    } else if (apps_dumped.length != apps_running.length) {
      _Common["default"].printOut("Current process list running is not in sync with saved list. Type 'pm2 save' to synchronize'");
    }
  } catch (e) {}
}

var proc_id = 0;
/**
 * List Applications and Modules managed by PM2
 */

function listModulesAndAppsManaged(list) {
  var name_col_size = 11;
  if (list && list.length > 0) name_col_size = list.reduce(function (p, c) {
    return p.name.length > c.name.length ? p : c;
  }).name.length + 5;
  var app_head = {
    id: 5,
    name: name_col_size,
    namespace: 13,
    version: 9,
    mode: 9,
    pid: 10,
    uptime: 8,
    '↺': 6,
    status: 11,
    cpu: 10,
    mem: 10,
    user: 10,
    watching: 10
  };
  var mod_head = {
    id: 4,
    module: 39,
    version: 20,
    pid: 7,
    status: 10,
    '↺': 6,
    cpu: 10,
    mem: 10,
    user: 10
  };

  if (CONDENSED_MODE) {
    app_head = {
      id: 4,
      name: 20,
      mode: 10,
      '↺': 6,
      status: 11,
      cpu: 10,
      memory: 10
    };
    mod_head = {
      id: 4,
      name: 20,
      status: 10,
      cpu: 10,
      mem: 10
    };
  }

  var app_table = new _cliTableau["default"]({
    head: Object.keys(app_head),
    colWidths: Object.keys(app_head).map(function (k) {
      return app_head[k];
    }),
    colAligns: ['left'],
    style: {
      'padding-left': 1,
      head: ['cyan', 'bold'],
      compact: true
    }
  });
  var module_table = new _cliTableau["default"]({
    head: Object.keys(mod_head),
    colWidths: Object.keys(mod_head).map(function (k) {
      return mod_head[k];
    }),
    colAligns: ['left'],
    style: {
      'padding-left': 1,
      head: ['cyan', 'bold'],
      compact: true
    }
  });
  var sortField = 'name',
      sortOrder = 'asc',
      sort,
      fields = {
    name: 'pm2_env.name',
    namespace: 'pm2_env.namespace',
    pid: 'pid',
    id: 'pm_id',
    cpu: 'monit.cpu',
    memory: 'monit.memory',
    uptime: 'pm2_env.pm_uptime',
    status: 'pm2_env.status'
  };
  list.sort(function (a, b) {
    var fieldA = _helpers["default"].getNestedProperty(fields[sortField], a);

    var fieldB = _helpers["default"].getNestedProperty(fields[sortField], b);

    if (sortOrder === 'desc') {
      if (fieldA > fieldB) return -1;
      if (fieldA < fieldB) return 1;
    } else {
      if (fieldA < fieldB) return -1;
      if (fieldA > fieldB) return 1;
    }

    return 0;
  });
  list.forEach(function (l) {
    var obj = {};

    if (l.pm2_env.pm_id > proc_id) {
      proc_id = l.pm2_env.pm_id;
    }

    var mode = l.pm2_env.exec_mode;
    var status = l.pm2_env.status;
    var key = l.pm2_env.pm_id;
    key = _chalk["default"].bold.cyan(key);

    if (l.pm2_env.axm_options) {
      var is_tracing_enabled = false;
      if (l.pm2_env.axm_options.tracing && typeof l.pm2_env.axm_options.tracing == 'boolean' && l.pm2_env.axm_options.tracing == true) is_tracing_enabled = true;
      if (l.pm2_env.axm_options.tracing && l.pm2_env.axm_options.tracing.enabled && typeof l.pm2_env.axm_options.tracing.enabled == 'boolean' && l.pm2_env.axm_options.tracing.enabled == true) is_tracing_enabled = true;
      if (is_tracing_enabled == true) l.pm2_env.name = _chalk["default"].green('☵') + ' ' + l.pm2_env.name;
      if (l.pm2_env._km_monitored) l.pm2_env.name = _chalk["default"].bold.green('◉') + ' ' + l.pm2_env.name;
    }

    if (l.pm2_env.pmx_module == true) {
      // pm2 ls for Modules
      obj[key] = [];
      obj[key].push(l.name); // Module version + PID

      if (!CONDENSED_MODE) {
        var pid = l.pm2_env.axm_options.pid ? l.pm2_env.axm_options.pid : l.pid;
        obj[key].push(l.pm2_env.version || 'N/A', pid);
      } // Status


      obj[key].push(_helpers["default"].colorStatus(status)); // Restart

      if (!CONDENSED_MODE) obj[key].push(l.pm2_env.restart_time ? l.pm2_env.restart_time : 0); // CPU + Memory

      obj[key].push(l.monit ? l.monit.cpu + '%' : 'N/A', l.monit ? _helpers["default"].bytesToSize(l.monit.memory, 1) : 'N/A'); // User

      if (!CONDENSED_MODE) {
        if (l.pm2_env.uid && typeof l.pm2_env.uid == 'number') {
          // Resolve user id to username
          var users = _passwd["default"].getUsers();

          Object.keys(users).forEach(function (username) {
            var user = users[username];

            if (user.userId == l.pm2_env.uid) {
              l.pm2_env.uid = user.username;
            }
          });
        }

        obj[key].push(_chalk["default"].bold(l.pm2_env.uid || l.pm2_env.username));
      }

      _helpers["default"].safe_push(module_table, obj);
    } else {
      // pm2 ls for Applications
      obj[key] = []; // PM2 ID

      obj[key].push(l.pm2_env.name); // Namespace

      if (!CONDENSED_MODE) obj[key].push(l.pm2_env.namespace); // Version

      if (!CONDENSED_MODE) obj[key].push(l.pm2_env.version); // Exec mode

      obj[key].push(mode == 'fork_mode' ? _chalk["default"].inverse.bold('fork') : _chalk["default"].blue.bold('cluster')); // PID

      if (!CONDENSED_MODE) obj[key].push(l.pid); // Uptime

      if (!CONDENSED_MODE) obj[key].push(l.pm2_env.pm_uptime && status == 'online' ? _helpers["default"].timeSince(l.pm2_env.pm_uptime) : 0); // Restart

      obj[key].push(l.pm2_env.restart_time ? l.pm2_env.restart_time : 0); // Status

      obj[key].push(_helpers["default"].colorStatus(status)); // CPU

      obj[key].push(l.monit ? l.monit.cpu + '%' : 'N/A'); // Memory

      obj[key].push(l.monit ? _helpers["default"].bytesToSize(l.monit.memory, 1) : 'N/A'); // User

      if (!CONDENSED_MODE) {
        if (l.pm2_env.uid && typeof l.pm2_env.uid == 'number') {
          // Resolve user id to username
          var _users = _passwd["default"].getUsers();

          Object.keys(_users).forEach(function (username) {
            var user = _users[username];

            if (user.userId == l.pm2_env.uid) {
              l.pm2_env.uid = user.username;
            }
          });
        }

        obj[key].push(_chalk["default"].bold(l.pm2_env.uid || l.pm2_env.username));
      } // Watch status


      if (!CONDENSED_MODE) obj[key].push(l.pm2_env.watch ? _chalk["default"].green.bold('enabled') : _chalk["default"].grey('disabled'));

      _helpers["default"].safe_push(app_table, obj);
    }
  }); // Print Applications Managed

  console.log(app_table.toString()); // Print Modules Managed

  if (module_table.length > 0) {
    console.log(_chalk["default"].bold("Module".concat(module_table.length > 1 ? 's' : '')));
    console.log(module_table.toString());
  }

  proc_id++;
} // Container display


function containersListing(sys_infos) {
  var stacked_docker = (process.stdout.columns || 100) < 140;
  var docker_head = {
    id: 4,
    image: 50,
    status: 10,
    '↺': 6,
    cpu: 10,
    mem: 10,
    'net I/O ⇵': 11,
    'fs I/O ⇵': 11
  };

  if (stacked_docker) {
    docker_head = {
      id: 4,
      image: 25,
      status: 10,
      cpu: 10,
      mem: 10
    };
  }

  var docker_table = new _cliTableau["default"]({
    colWidths: Object.keys(docker_head).map(function (k) {
      return docker_head[k];
    }),
    head: Object.keys(docker_head),
    colAligns: ['left'],
    style: {
      'padding-left': 1,
      head: ['cyan', 'bold'],
      compact: true
    }
  });
  sys_infos.containers.forEach(function (c) {
    var cpu = c.stats.cpu_percent;
    var mem = c.stats.mem_percent == 0 ? '0' : c.stats.mem_percent;

    var id = _chalk["default"].bold.cyan(proc_id++);

    var state = _helpers["default"].colorStatus(c.state);

    if (stacked_docker) docker_table.push([id, c.image, state, "".concat(cpu, "%"), "".concat(mem, "mb")]);else {
      docker_table.push([id, c.image, state, c.restartCount, "".concat(cpu == 0 ? '0' : cpu, "%"), "".concat(mem, "mb"), "".concat(c.stats.netIO.rx, "/").concat(isNaN(c.stats.netIO.tx) == true ? '0.0' : c.stats.netIO.tx), "".concat(c.stats.blockIO.r, "/").concat(c.stats.blockIO.w)]);
    }
  });
  console.log(_chalk["default"].bold("Container".concat(sys_infos.containers.length > 1 ? 's' : '')));
  console.log(docker_table.toString());
}
/**
 * High resource processes
 */


function listHighResourcesProcesses(sys_infos) {
  var CPU_MIN_SHOW = 60;
  var MEM_MIN_SHOW = 30;
  var sys_proc_head = ['id', 'cmd', 'pid', 'cpu', 'mem', 'uid'];
  var sys_proc_table = new _cliTableau["default"]({
    colWidths: [4, CONDENSED_MODE ? 29 : 77, 10, 10, 10, 8],
    head: sys_proc_head,
    colAligns: ['left'],
    style: {
      'padding-left': 1,
      head: ['cyan', 'bold'],
      compact: true
    }
  });
  sys_infos.processes.cpu_sorted = sys_infos.processes.cpu_sorted.filter(function (proc) {
    return proc.cpu > CPU_MIN_SHOW && proc.cmd.includes('node') === false && proc.cmd.includes('God Daemon') === false;
  });
  sys_infos.processes.cpu_sorted.forEach(function (proc) {
    var cpu = "".concat(_helpers["default"].colorizedMetric(proc.cpu, 40, 70, '%'));
    var mem = "".concat(_helpers["default"].colorizedMetric(proc.memory, 40, 70, '%'));
    var cmd = proc.cmd;
    sys_proc_table.push([_chalk["default"].bold.cyan(proc_id++), cmd, proc.pid, cpu, mem, proc.uid]);
  });
  sys_infos.processes.mem_sorted = sys_infos.processes.mem_sorted.filter(function (proc) {
    return proc.memory > MEM_MIN_SHOW && proc.cmd.includes('node') == false;
  });
  sys_infos.processes.mem_sorted.forEach(function (proc) {
    var cpu = "".concat(_helpers["default"].colorizedMetric(proc.cpu, 40, 70, '%'));
    var mem = "".concat(_helpers["default"].colorizedMetric(proc.memory, 40, 70, '%'));
    var cmd = proc.cmd; // if (proc.cmd.length > 50)
    //   cmd = '…' + proc.cmd.slice(proc.cmd.length - 48, proc.cmd.length)

    sys_proc_table.push([_chalk["default"].bold.cyan(proc_id++), cmd, proc.pid, cpu, mem, proc.uid]);
  });

  if (sys_infos.processes.cpu_sorted.length >= 1 || sys_infos.processes.mem_sorted.length >= 1) {
    console.log(_chalk["default"].bold('Intensive Processes'));
    console.log(sys_proc_table.toString());
  }
}
/**
 * Sys info line
 */


function miniMonitBar(sys_infos) {
  var sys_summary_line = "".concat(_chalk["default"].bold.cyan('host metrics'), " ");
  sys_summary_line += "| ".concat(_chalk["default"].bold('cpu'), ": ").concat(_helpers["default"].colorizedMetric(sys_infos.cpu.usage, 40, 70, '%'));

  if (sys_infos.cpu.temperature && sys_infos.cpu.temperature != '-1') {
    sys_summary_line += " ".concat(_helpers["default"].colorizedMetric(sys_infos.cpu.temperature, 50, 70, 'º'));
  }

  if (sys_infos.mem) {
    var perc_mem_usage = (sys_infos.mem.available / sys_infos.mem.total * 100).toFixed(1);
    sys_summary_line += " | ".concat(_chalk["default"].bold('mem free'), ": ").concat(_helpers["default"].colorizedMetric(perc_mem_usage, 30, 10, '%'), " ");
  }

  if (sys_infos.network) {
    var latency = sys_infos.network.latency.toFixed(1);

    if (latency == -1) {
      sys_summary_line += "| ".concat(_chalk["default"].bold('net'), ": ").concat(_chalk["default"].red('offline'), " ");
    } else {
      sys_summary_line += "| ".concat(_chalk["default"].bold('net'), ": "); //sys_summary_line += `${colorizedMetric(latency, 100, 150, 'ms')} `

      sys_summary_line += "\u21D3 ".concat(_helpers["default"].colorizedMetric(sys_infos.network.rx_5, 10, 20, 'mb/s'), " ");
      sys_summary_line += "\u21D1 ".concat(_helpers["default"].colorizedMetric(sys_infos.network.tx_5, 10, 20, 'mb/s'), " ");
    }
  }

  if (CONDENSED_MODE == false) {
    if (sys_infos.storage) {
      sys_summary_line += "| ".concat(_chalk["default"].bold('disk'), ": \u21D3 ").concat(_helpers["default"].colorizedMetric(sys_infos.storage.io.read, 10, 20, 'mb/s'));
      sys_summary_line += " \u21D1 ".concat(_helpers["default"].colorizedMetric(sys_infos.storage.io.write, 10, 20, 'mb/s'), " ");
    }

    var disk_nb = 0;
    sys_infos.storage.filesystems.forEach(function (fs) {
      disk_nb++;
      var perc_used = (fs.used / fs.size * 100).toFixed();
      if (+perc_used > 60) sys_summary_line += "".concat(_chalk["default"].grey(fs.fs), " ").concat(_helpers["default"].colorizedMetric(perc_used, 80, 90, '%'), " ");
    });
  }

  sys_summary_line += '|';
  console.log(sys_summary_line);
}
/**
 * pm2 ls
 * @method dispAsTable
 * @param {Object} list
 * @param {Object} system informations (via pm2 sysmonit/pm2 sysinfos)
 */


function _default(list, sys_infos) {
  var pm2_conf = _Configuration["default"].getSync('pm2');

  if (!list) return console.log('list empty');
  listModulesAndAppsManaged(list);

  if (sys_infos) {
    if (sys_infos.containers && sys_infos.containers.length > 0 && pm2_conf && pm2_conf.show_docker == "true") containersListing(sys_infos);
    if (sys_infos.processes && (sys_infos.processes.cpu_sorted || sys_infos.processes.mem_sorted)) listHighResourcesProcesses(sys_infos);
    if (sys_infos.cpu && sys_infos.cpu.usage) miniMonitBar(sys_infos);
  } //checkIfProcessAreDumped(list)

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BUEkvVVgvcG0yLWxzLnRzIl0sIm5hbWVzIjpbIkxpc3QiLCJDT05ERU5TRURfTU9ERSIsInByb2Nlc3MiLCJzdGRvdXQiLCJjb2x1bW5zIiwiY2hlY2tJZlByb2Nlc3NBcmVEdW1wZWQiLCJsaXN0IiwiZHVtcF9yYXciLCJyZXF1aXJlIiwicmVhZEZpbGVTeW5jIiwiY3N0IiwiRFVNUF9GSUxFX1BBVEgiLCJkdW1wIiwiSlNPTiIsInBhcnNlIiwiYXBwc19kdW1wZWQiLCJtYXAiLCJwcm9jIiwibmFtZSIsImFwcHNfcnVubmluZyIsImZpbHRlciIsInBtMl9lbnYiLCJwbXhfbW9kdWxlIiwiZGlmZiIsImEiLCJpbmNsdWRlcyIsImxlbmd0aCIsIkNvbW1vbiIsInByaW50T3V0IiwiY2hhbGsiLCJpdGFsaWMiLCJqb2luIiwiZSIsInByb2NfaWQiLCJsaXN0TW9kdWxlc0FuZEFwcHNNYW5hZ2VkIiwibmFtZV9jb2xfc2l6ZSIsInJlZHVjZSIsInAiLCJjIiwiYXBwX2hlYWQiLCJpZCIsIm5hbWVzcGFjZSIsInZlcnNpb24iLCJtb2RlIiwicGlkIiwidXB0aW1lIiwic3RhdHVzIiwiY3B1IiwibWVtIiwidXNlciIsIndhdGNoaW5nIiwibW9kX2hlYWQiLCJtb2R1bGUiLCJtZW1vcnkiLCJhcHBfdGFibGUiLCJUYWJsZSIsImhlYWQiLCJPYmplY3QiLCJrZXlzIiwiY29sV2lkdGhzIiwiayIsImNvbEFsaWducyIsInN0eWxlIiwiY29tcGFjdCIsIm1vZHVsZV90YWJsZSIsInNvcnRGaWVsZCIsInNvcnRPcmRlciIsInNvcnQiLCJmaWVsZHMiLCJiIiwiZmllbGRBIiwiVXhIZWxwZXJzIiwiZ2V0TmVzdGVkUHJvcGVydHkiLCJmaWVsZEIiLCJmb3JFYWNoIiwibCIsIm9iaiIsInBtX2lkIiwiZXhlY19tb2RlIiwia2V5IiwiYm9sZCIsImN5YW4iLCJheG1fb3B0aW9ucyIsImlzX3RyYWNpbmdfZW5hYmxlZCIsInRyYWNpbmciLCJlbmFibGVkIiwiZ3JlZW4iLCJfa21fbW9uaXRvcmVkIiwicHVzaCIsImNvbG9yU3RhdHVzIiwicmVzdGFydF90aW1lIiwibW9uaXQiLCJieXRlc1RvU2l6ZSIsInVpZCIsInVzZXJzIiwiUGFzc3dkIiwiZ2V0VXNlcnMiLCJ1c2VybmFtZSIsInVzZXJJZCIsInNhZmVfcHVzaCIsImludmVyc2UiLCJibHVlIiwicG1fdXB0aW1lIiwidGltZVNpbmNlIiwid2F0Y2giLCJncmV5IiwiY29uc29sZSIsImxvZyIsInRvU3RyaW5nIiwiY29udGFpbmVyc0xpc3RpbmciLCJzeXNfaW5mb3MiLCJzdGFja2VkX2RvY2tlciIsImRvY2tlcl9oZWFkIiwiaW1hZ2UiLCJkb2NrZXJfdGFibGUiLCJjb250YWluZXJzIiwic3RhdHMiLCJjcHVfcGVyY2VudCIsIm1lbV9wZXJjZW50Iiwic3RhdGUiLCJyZXN0YXJ0Q291bnQiLCJuZXRJTyIsInJ4IiwiaXNOYU4iLCJ0eCIsImJsb2NrSU8iLCJyIiwidyIsImxpc3RIaWdoUmVzb3VyY2VzUHJvY2Vzc2VzIiwiQ1BVX01JTl9TSE9XIiwiTUVNX01JTl9TSE9XIiwic3lzX3Byb2NfaGVhZCIsInN5c19wcm9jX3RhYmxlIiwicHJvY2Vzc2VzIiwiY3B1X3NvcnRlZCIsImNtZCIsImNvbG9yaXplZE1ldHJpYyIsIm1lbV9zb3J0ZWQiLCJtaW5pTW9uaXRCYXIiLCJzeXNfc3VtbWFyeV9saW5lIiwidXNhZ2UiLCJ0ZW1wZXJhdHVyZSIsInBlcmNfbWVtX3VzYWdlIiwiYXZhaWxhYmxlIiwidG90YWwiLCJ0b0ZpeGVkIiwibmV0d29yayIsImxhdGVuY3kiLCJyZWQiLCJyeF81IiwidHhfNSIsInN0b3JhZ2UiLCJpbyIsInJlYWQiLCJ3cml0ZSIsImRpc2tfbmIiLCJmaWxlc3lzdGVtcyIsImZzIiwicGVyY191c2VkIiwidXNlZCIsInNpemUiLCJwbTJfY29uZiIsIkNvbmZpZ3VyYXRpb24iLCJnZXRTeW5jIiwic2hvd19kb2NrZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFDQTs7QUFD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YzZGLEtBQW5DLEVBQ0VGLFlBQVksQ0FBQzVCLFNBQUQsQ0FBWjtBQUNILEdBbEJzQyxDQW9CdkM7O0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCBjc3QgZnJvbSAnLi4vLi4vLi4vY29uc3RhbnRzJztcbmltcG9ydCBDb21tb24gZnJvbSAnLi4vLi4vQ29tbW9uJztcbmltcG9ydCBDb25maWd1cmF0aW9uIGZyb20gJy4uLy4uL0NvbmZpZ3VyYXRpb24nO1xuaW1wb3J0IFV4SGVscGVycyBmcm9tICcuL2hlbHBlcnMnO1xuaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJztcbmltcG9ydCBUYWJsZSBmcm9tICdjbGktdGFibGVhdSc7XG5pbXBvcnQgUGFzc3dkIGZyb20gJy4uLy4uL3Rvb2xzL3Bhc3N3ZCc7XG5cbmNvbnN0IExpc3QgPSB7fVxuXG5jb25zdCBDT05ERU5TRURfTU9ERSA9IChwcm9jZXNzLnN0ZG91dC5jb2x1bW5zIHx8IDMwMCkgPCAxMjBcblxuLyoqXG4gKiBDaGVjayBpZiBkdW1wIGZpbGUgY29udGFpbnMgc2FtZSBhcHBzIHRoYXQgdGhlIG9uZSBtYW5hZ2VkIGJ5IFBNMlxuICovXG5mdW5jdGlvbiBjaGVja0lmUHJvY2Vzc0FyZUR1bXBlZChsaXN0KSB7XG4gIHRyeSB7XG4gICAgdmFyIGR1bXBfcmF3ID0gcmVxdWlyZSgnZnMnKS5yZWFkRmlsZVN5bmMoY3N0LkRVTVBfRklMRV9QQVRIKVxuICAgIHZhciBkdW1wID0gSlNPTi5wYXJzZShkdW1wX3JhdylcbiAgICB2YXIgYXBwc19kdW1wZWQgPSBkdW1wLm1hcChwcm9jID0+IHByb2MubmFtZSlcbiAgICB2YXIgYXBwc19ydW5uaW5nID0gbGlzdFxuICAgICAgICAuZmlsdGVyKHByb2MgPT4gcHJvYy5wbTJfZW52LnBteF9tb2R1bGUgIT0gdHJ1ZSlcbiAgICAgICAgLm1hcChwcm9jID0+IHByb2MubmFtZSlcbiAgICB2YXIgZGlmZiA9IGFwcHNfZHVtcGVkLmZpbHRlcihhID0+ICFhcHBzX3J1bm5pbmcuaW5jbHVkZXMoYSkpXG4gICAgaWYgKGRpZmYubGVuZ3RoID4gMCkge1xuICAgICAgQ29tbW9uLnByaW50T3V0KGBDdXJyZW50IHByb2Nlc3MgbGlzdCBydW5uaW5nIGlzIG5vdCBpbiBzeW5jIHdpdGggc2F2ZWQgbGlzdC4gJHtjaGFsay5pdGFsaWMoZGlmZi5qb2luKCcgJykpfSBkaWZmZXJzLiBUeXBlICdwbTIgc2F2ZScgdG8gc3luY2hyb25pemUuYClcbiAgICB9XG4gICAgZWxzZSBpZiAoYXBwc19kdW1wZWQubGVuZ3RoICE9IGFwcHNfcnVubmluZy5sZW5ndGgpIHtcbiAgICAgIENvbW1vbi5wcmludE91dChgQ3VycmVudCBwcm9jZXNzIGxpc3QgcnVubmluZyBpcyBub3QgaW4gc3luYyB3aXRoIHNhdmVkIGxpc3QuIFR5cGUgJ3BtMiBzYXZlJyB0byBzeW5jaHJvbml6ZSdgKVxuICAgIH1cbiAgfSBjYXRjaChlKSB7XG4gIH1cbn1cblxudmFyIHByb2NfaWQgPSAwXG5cbi8qKlxuICogTGlzdCBBcHBsaWNhdGlvbnMgYW5kIE1vZHVsZXMgbWFuYWdlZCBieSBQTTJcbiAqL1xuZnVuY3Rpb24gbGlzdE1vZHVsZXNBbmRBcHBzTWFuYWdlZChsaXN0KSB7XG4gIHZhciBuYW1lX2NvbF9zaXplID0gMTFcblxuICBpZiAobGlzdCAmJiBsaXN0Lmxlbmd0aCA+IDApXG4gICAgbmFtZV9jb2xfc2l6ZSA9IChsaXN0LnJlZHVjZSgocCwgYykgPT4gKHAubmFtZS5sZW5ndGggPiBjLm5hbWUubGVuZ3RoKSA/IHAgOiBjKSkubmFtZS5sZW5ndGggKyA1XG5cbiAgdmFyIGFwcF9oZWFkOiBhbnkgPSB7XG4gICAgaWQ6IDUsXG4gICAgbmFtZTogbmFtZV9jb2xfc2l6ZSxcbiAgICBuYW1lc3BhY2U6IDEzLFxuICAgIHZlcnNpb246IDksXG4gICAgbW9kZTogOSxcbiAgICBwaWQ6IDEwLFxuICAgIHVwdGltZTogOCxcbiAgICAn4oa6JzogNixcbiAgICBzdGF0dXM6IDExLFxuICAgIGNwdTogMTAsXG4gICAgbWVtOiAxMCxcbiAgICB1c2VyOiAxMCxcbiAgICB3YXRjaGluZzogMTBcbiAgfVxuXG4gIHZhciBtb2RfaGVhZDogYW55ID0ge1xuICAgIGlkOiA0LFxuICAgIG1vZHVsZTogMzksXG4gICAgdmVyc2lvbjogMjAsXG4gICAgcGlkOiA3LFxuICAgIHN0YXR1czogMTAsXG4gICAgJ+KGuic6IDYsXG4gICAgY3B1OiAxMCxcbiAgICBtZW06IDEwLFxuICAgIHVzZXI6IDEwXG4gIH1cblxuICBpZiAoQ09OREVOU0VEX01PREUpIHtcbiAgICBhcHBfaGVhZCA9IHtcbiAgICAgIGlkOiA0LFxuICAgICAgbmFtZTogMjAsXG4gICAgICBtb2RlOiAxMCxcbiAgICAgICfihronOiA2LFxuICAgICAgc3RhdHVzOiAxMSxcbiAgICAgIGNwdTogMTAsXG4gICAgICBtZW1vcnk6IDEwXG4gICAgfVxuXG4gICAgbW9kX2hlYWQgPSB7XG4gICAgICBpZDogNCxcbiAgICAgIG5hbWU6IDIwLFxuICAgICAgc3RhdHVzOiAxMCxcbiAgICAgIGNwdTogMTAsXG4gICAgICBtZW06IDEwXG4gICAgfVxuICB9XG5cbiAgdmFyIGFwcF90YWJsZSA9IG5ldyBUYWJsZSh7XG4gICAgaGVhZCA6IE9iamVjdC5rZXlzKGFwcF9oZWFkKSxcbiAgICBjb2xXaWR0aHM6IE9iamVjdC5rZXlzKGFwcF9oZWFkKS5tYXAoayA9PiBhcHBfaGVhZFtrXSksXG4gICAgY29sQWxpZ25zIDogWydsZWZ0J10sXG4gICAgc3R5bGUgOiB7J3BhZGRpbmctbGVmdCcgOiAxLCBoZWFkIDogWydjeWFuJywgJ2JvbGQnXSwgY29tcGFjdCA6IHRydWV9XG4gIH0pXG5cbiAgdmFyIG1vZHVsZV90YWJsZSA9IG5ldyBUYWJsZSh7XG4gICAgaGVhZCA6IE9iamVjdC5rZXlzKG1vZF9oZWFkKSxcbiAgICBjb2xXaWR0aHM6IE9iamVjdC5rZXlzKG1vZF9oZWFkKS5tYXAoayA9PiBtb2RfaGVhZFtrXSksXG4gICAgY29sQWxpZ25zIDogWydsZWZ0J10sXG4gICAgc3R5bGUgOiB7J3BhZGRpbmctbGVmdCcgOiAxLCBoZWFkIDogWydjeWFuJywgJ2JvbGQnXSwgIGNvbXBhY3QgOiB0cnVlfVxuICB9KVxuXG4gIHZhciBzb3J0RmllbGQgPSAnbmFtZScsIHNvcnRPcmRlciA9ICdhc2MnLCBzb3J0LFxuICAgICAgZmllbGRzID0ge1xuICAgICAgICBuYW1lOiAncG0yX2Vudi5uYW1lJyxcbiAgICAgICAgbmFtZXNwYWNlOiAncG0yX2Vudi5uYW1lc3BhY2UnLFxuICAgICAgICBwaWQ6ICdwaWQnLFxuICAgICAgICBpZDogJ3BtX2lkJyxcbiAgICAgICAgY3B1OiAnbW9uaXQuY3B1JyxcbiAgICAgICAgbWVtb3J5OiAnbW9uaXQubWVtb3J5JyxcbiAgICAgICAgdXB0aW1lOiAncG0yX2Vudi5wbV91cHRpbWUnLFxuICAgICAgICBzdGF0dXM6ICdwbTJfZW52LnN0YXR1cydcbiAgICAgIH1cblxuICBsaXN0LnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgIHZhciBmaWVsZEEgPSBVeEhlbHBlcnMuZ2V0TmVzdGVkUHJvcGVydHkoZmllbGRzW3NvcnRGaWVsZF0sIGEpXG4gICAgdmFyIGZpZWxkQiA9IFV4SGVscGVycy5nZXROZXN0ZWRQcm9wZXJ0eShmaWVsZHNbc29ydEZpZWxkXSwgYilcblxuICAgIGlmIChzb3J0T3JkZXIgPT09ICdkZXNjJykge1xuICAgICAgaWYgKGZpZWxkQSA+IGZpZWxkQilcbiAgICAgICAgcmV0dXJuIC0xXG4gICAgICBpZiAoZmllbGRBIDwgZmllbGRCKVxuICAgICAgICByZXR1cm4gMVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZmllbGRBIDwgZmllbGRCKVxuICAgICAgICByZXR1cm4gLTFcbiAgICAgIGlmIChmaWVsZEEgPiBmaWVsZEIpXG4gICAgICAgIHJldHVybiAxXG4gICAgfVxuICAgIHJldHVybiAwXG4gIH0pXG5cbiAgbGlzdC5mb3JFYWNoKGZ1bmN0aW9uKGwpIHtcbiAgICB2YXIgb2JqID0ge31cblxuICAgIGlmIChsLnBtMl9lbnYucG1faWQgPiBwcm9jX2lkKSB7XG4gICAgICBwcm9jX2lkID0gbC5wbTJfZW52LnBtX2lkXG4gICAgfVxuXG4gICAgdmFyIG1vZGUgPSBsLnBtMl9lbnYuZXhlY19tb2RlXG4gICAgdmFyIHN0YXR1cyA9IGwucG0yX2Vudi5zdGF0dXNcbiAgICB2YXIga2V5ID0gbC5wbTJfZW52LnBtX2lkXG4gICAga2V5ID0gY2hhbGsuYm9sZC5jeWFuKGtleSlcblxuICAgIGlmIChsLnBtMl9lbnYuYXhtX29wdGlvbnMpIHtcbiAgICAgIHZhciBpc190cmFjaW5nX2VuYWJsZWQgPSBmYWxzZVxuXG4gICAgICBpZiAobC5wbTJfZW52LmF4bV9vcHRpb25zLnRyYWNpbmcgJiZcbiAgICAgICAgICB0eXBlb2YobC5wbTJfZW52LmF4bV9vcHRpb25zLnRyYWNpbmcpID09ICdib29sZWFuJyAmJlxuICAgICAgICAgIGwucG0yX2Vudi5heG1fb3B0aW9ucy50cmFjaW5nID09IHRydWUpXG4gICAgICAgIGlzX3RyYWNpbmdfZW5hYmxlZCA9IHRydWVcblxuICAgICAgaWYgKGwucG0yX2Vudi5heG1fb3B0aW9ucy50cmFjaW5nICYmXG4gICAgICAgICAgbC5wbTJfZW52LmF4bV9vcHRpb25zLnRyYWNpbmcuZW5hYmxlZCAmJlxuICAgICAgICAgIHR5cGVvZihsLnBtMl9lbnYuYXhtX29wdGlvbnMudHJhY2luZy5lbmFibGVkKSA9PSAnYm9vbGVhbicgJiZcbiAgICAgICAgICBsLnBtMl9lbnYuYXhtX29wdGlvbnMudHJhY2luZy5lbmFibGVkID09IHRydWUpXG4gICAgICAgIGlzX3RyYWNpbmdfZW5hYmxlZCA9IHRydWVcblxuICAgICAgaWYgKGlzX3RyYWNpbmdfZW5hYmxlZCA9PSB0cnVlKVxuICAgICAgICBsLnBtMl9lbnYubmFtZSA9IGNoYWxrLmdyZWVuKCfimLUnKSAgKyAnICcgKyBsLnBtMl9lbnYubmFtZVxuXG4gICAgICBpZiAobC5wbTJfZW52Ll9rbV9tb25pdG9yZWQpXG4gICAgICAgIGwucG0yX2Vudi5uYW1lID0gY2hhbGsuYm9sZC5ncmVlbign4peJJykgICsgJyAnICsgbC5wbTJfZW52Lm5hbWVcbiAgICB9XG5cbiAgICBpZiAobC5wbTJfZW52LnBteF9tb2R1bGUgPT0gdHJ1ZSkge1xuICAgICAgLy8gcG0yIGxzIGZvciBNb2R1bGVzXG4gICAgICBvYmpba2V5XSA9IFtdXG5cbiAgICAgIG9ialtrZXldLnB1c2gobC5uYW1lKVxuXG4gICAgICAvLyBNb2R1bGUgdmVyc2lvbiArIFBJRFxuICAgICAgaWYgKCFDT05ERU5TRURfTU9ERSkge1xuICAgICAgICB2YXIgcGlkID0gbC5wbTJfZW52LmF4bV9vcHRpb25zLnBpZCA/IGwucG0yX2Vudi5heG1fb3B0aW9ucy5waWQgOiBsLnBpZFxuICAgICAgICBvYmpba2V5XS5wdXNoKGwucG0yX2Vudi52ZXJzaW9uIHx8ICdOL0EnLCBwaWQpXG4gICAgICB9XG5cbiAgICAgIC8vIFN0YXR1c1xuICAgICAgb2JqW2tleV0ucHVzaChVeEhlbHBlcnMuY29sb3JTdGF0dXMoc3RhdHVzKSlcblxuICAgICAgLy8gUmVzdGFydFxuICAgICAgaWYgKCFDT05ERU5TRURfTU9ERSlcbiAgICAgICAgb2JqW2tleV0ucHVzaChsLnBtMl9lbnYucmVzdGFydF90aW1lID8gbC5wbTJfZW52LnJlc3RhcnRfdGltZSA6IDApXG5cbiAgICAgIC8vIENQVSArIE1lbW9yeVxuICAgICAgb2JqW2tleV0ucHVzaChsLm1vbml0ID8gKGwubW9uaXQuY3B1ICsgJyUnKSA6ICdOL0EnLCBsLm1vbml0ID8gVXhIZWxwZXJzLmJ5dGVzVG9TaXplKGwubW9uaXQubWVtb3J5LCAxKSA6ICdOL0EnIClcblxuICAgICAgLy8gVXNlclxuICAgICAgaWYgKCFDT05ERU5TRURfTU9ERSkge1xuXG4gICAgICAgIGlmIChsLnBtMl9lbnYudWlkICYmIHR5cGVvZihsLnBtMl9lbnYudWlkKSA9PSAnbnVtYmVyJykge1xuICAgICAgICAgIC8vIFJlc29sdmUgdXNlciBpZCB0byB1c2VybmFtZVxuICAgICAgICAgIGxldCB1c2VycyA9IFBhc3N3ZC5nZXRVc2VycygpXG4gICAgICAgICAgT2JqZWN0LmtleXModXNlcnMpLmZvckVhY2goZnVuY3Rpb24odXNlcm5hbWUpIHtcbiAgICAgICAgICAgIHZhciB1c2VyID0gdXNlcnNbdXNlcm5hbWVdXG4gICAgICAgICAgICBpZiAodXNlci51c2VySWQgPT0gbC5wbTJfZW52LnVpZCkge1xuICAgICAgICAgICAgICBsLnBtMl9lbnYudWlkID0gdXNlci51c2VybmFtZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgb2JqW2tleV0ucHVzaChjaGFsay5ib2xkKGwucG0yX2Vudi51aWQgfHwgbC5wbTJfZW52LnVzZXJuYW1lKSlcbiAgICAgIH1cblxuICAgICAgVXhIZWxwZXJzLnNhZmVfcHVzaChtb2R1bGVfdGFibGUsIG9iailcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAvLyBwbTIgbHMgZm9yIEFwcGxpY2F0aW9uc1xuICAgICAgb2JqW2tleV0gPSBbXVxuXG4gICAgICAvLyBQTTIgSURcbiAgICAgIG9ialtrZXldLnB1c2gobC5wbTJfZW52Lm5hbWUpXG5cbiAgICAgIC8vIE5hbWVzcGFjZVxuICAgICAgaWYgKCFDT05ERU5TRURfTU9ERSlcbiAgICAgICAgb2JqW2tleV0ucHVzaChsLnBtMl9lbnYubmFtZXNwYWNlKVxuXG4gICAgICAvLyBWZXJzaW9uXG4gICAgICBpZiAoIUNPTkRFTlNFRF9NT0RFKVxuICAgICAgICBvYmpba2V5XS5wdXNoKGwucG0yX2Vudi52ZXJzaW9uKVxuXG4gICAgICAvLyBFeGVjIG1vZGVcbiAgICAgIG9ialtrZXldLnB1c2gobW9kZSA9PSAnZm9ya19tb2RlJyA/IGNoYWxrLmludmVyc2UuYm9sZCgnZm9yaycpIDogY2hhbGsuYmx1ZS5ib2xkKCdjbHVzdGVyJykpXG5cbiAgICAgIC8vIFBJRFxuICAgICAgaWYgKCFDT05ERU5TRURfTU9ERSlcbiAgICAgICAgb2JqW2tleV0ucHVzaChsLnBpZClcblxuICAgICAgLy8gVXB0aW1lXG4gICAgICBpZiAoIUNPTkRFTlNFRF9NT0RFKVxuICAgICAgICBvYmpba2V5XS5wdXNoKChsLnBtMl9lbnYucG1fdXB0aW1lICYmIHN0YXR1cyA9PSAnb25saW5lJykgPyBVeEhlbHBlcnMudGltZVNpbmNlKGwucG0yX2Vudi5wbV91cHRpbWUpIDogMClcblxuICAgICAgLy8gUmVzdGFydFxuICAgICAgb2JqW2tleV0ucHVzaChsLnBtMl9lbnYucmVzdGFydF90aW1lID8gbC5wbTJfZW52LnJlc3RhcnRfdGltZSA6IDApXG5cbiAgICAgIC8vIFN0YXR1c1xuICAgICAgb2JqW2tleV0ucHVzaChVeEhlbHBlcnMuY29sb3JTdGF0dXMoc3RhdHVzKSlcblxuXG4gICAgICAvLyBDUFVcbiAgICAgIG9ialtrZXldLnB1c2gobC5tb25pdCA/IGwubW9uaXQuY3B1ICsgJyUnIDogJ04vQScpXG5cbiAgICAgIC8vIE1lbW9yeVxuICAgICAgb2JqW2tleV0ucHVzaChsLm1vbml0ID8gVXhIZWxwZXJzLmJ5dGVzVG9TaXplKGwubW9uaXQubWVtb3J5LCAxKSA6ICdOL0EnKVxuXG4gICAgICAvLyBVc2VyXG4gICAgICBpZiAoIUNPTkRFTlNFRF9NT0RFKSB7XG4gICAgICAgIGlmIChsLnBtMl9lbnYudWlkICYmIHR5cGVvZihsLnBtMl9lbnYudWlkKSA9PSAnbnVtYmVyJykge1xuICAgICAgICAgIC8vIFJlc29sdmUgdXNlciBpZCB0byB1c2VybmFtZVxuICAgICAgICAgIGxldCB1c2VycyA9IFBhc3N3ZC5nZXRVc2VycygpXG4gICAgICAgICAgT2JqZWN0LmtleXModXNlcnMpLmZvckVhY2goZnVuY3Rpb24odXNlcm5hbWUpIHtcbiAgICAgICAgICAgIHZhciB1c2VyID0gdXNlcnNbdXNlcm5hbWVdXG4gICAgICAgICAgICBpZiAodXNlci51c2VySWQgPT0gbC5wbTJfZW52LnVpZCkge1xuICAgICAgICAgICAgICBsLnBtMl9lbnYudWlkID0gdXNlci51c2VybmFtZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgb2JqW2tleV0ucHVzaChjaGFsay5ib2xkKGwucG0yX2Vudi51aWQgfHwgbC5wbTJfZW52LnVzZXJuYW1lKSlcbiAgICAgIH1cblxuICAgICAgLy8gV2F0Y2ggc3RhdHVzXG4gICAgICBpZiAoIUNPTkRFTlNFRF9NT0RFKVxuICAgICAgICBvYmpba2V5XS5wdXNoKGwucG0yX2Vudi53YXRjaCA/IGNoYWxrLmdyZWVuLmJvbGQoJ2VuYWJsZWQnKSA6IGNoYWxrLmdyZXkoJ2Rpc2FibGVkJykpXG5cbiAgICAgIFV4SGVscGVycy5zYWZlX3B1c2goYXBwX3RhYmxlLCBvYmopXG4gICAgfVxuXG4gIH0pXG5cbiAgLy8gUHJpbnQgQXBwbGljYXRpb25zIE1hbmFnZWRcbiAgY29uc29sZS5sb2coYXBwX3RhYmxlLnRvU3RyaW5nKCkpXG5cbiAgLy8gUHJpbnQgTW9kdWxlcyBNYW5hZ2VkXG4gIGlmIChtb2R1bGVfdGFibGUubGVuZ3RoID4gMCkge1xuICAgIGNvbnNvbGUubG9nKGNoYWxrLmJvbGQoYE1vZHVsZSR7bW9kdWxlX3RhYmxlLmxlbmd0aCA+IDEgPyAncycgOiAnJ31gKSlcbiAgICBjb25zb2xlLmxvZyhtb2R1bGVfdGFibGUudG9TdHJpbmcoKSlcbiAgfVxuXG4gIHByb2NfaWQrK1xufVxuXG4vLyBDb250YWluZXIgZGlzcGxheVxuZnVuY3Rpb24gY29udGFpbmVyc0xpc3Rpbmcoc3lzX2luZm9zKSB7XG4gIHZhciBzdGFja2VkX2RvY2tlciA9IChwcm9jZXNzLnN0ZG91dC5jb2x1bW5zIHx8IDEwMCkgPCAxNDBcblxuICB2YXIgZG9ja2VyX2hlYWQ6IGFueSA9IHtcbiAgICBpZDogNCxcbiAgICBpbWFnZTogNTAsXG4gICAgc3RhdHVzOiAxMCxcbiAgICAn4oa6JzogNixcbiAgICBjcHU6IDEwLFxuICAgIG1lbTogMTAsXG4gICAgJ25ldCBJL08g4oe1JzogMTEsXG4gICAgJ2ZzIEkvTyDih7UnOiAxMVxuICB9XG5cbiAgaWYgKHN0YWNrZWRfZG9ja2VyKSB7XG4gICAgZG9ja2VyX2hlYWQgPSB7XG4gICAgICBpZDogNCxcbiAgICAgIGltYWdlOiAyNSxcbiAgICAgIHN0YXR1czogMTAsXG4gICAgICBjcHU6IDEwLFxuICAgICAgbWVtOiAxMFxuICAgIH1cbiAgfVxuXG4gIHZhciBkb2NrZXJfdGFibGUgPSBuZXcgVGFibGUoe1xuICAgIGNvbFdpZHRoczogT2JqZWN0LmtleXMoZG9ja2VyX2hlYWQpLm1hcChrID0+IGRvY2tlcl9oZWFkW2tdKSxcbiAgICBoZWFkIDogT2JqZWN0LmtleXMoZG9ja2VyX2hlYWQpLFxuICAgIGNvbEFsaWducyA6IFsnbGVmdCddLFxuICAgIHN0eWxlIDogeydwYWRkaW5nLWxlZnQnIDogMSwgaGVhZCA6IFsnY3lhbicsICdib2xkJ10sICBjb21wYWN0IDogdHJ1ZX1cbiAgfSlcblxuICBzeXNfaW5mb3MuY29udGFpbmVycy5mb3JFYWNoKChjKSA9PiB7XG4gICAgdmFyIGNwdSA9IGMuc3RhdHMuY3B1X3BlcmNlbnRcbiAgICB2YXIgbWVtID0gYy5zdGF0cy5tZW1fcGVyY2VudCA9PSAwID8gJzAnIDogYy5zdGF0cy5tZW1fcGVyY2VudFxuICAgIHZhciBpZCA9IGNoYWxrLmJvbGQuY3lhbihwcm9jX2lkKyspXG4gICAgdmFyIHN0YXRlID0gVXhIZWxwZXJzLmNvbG9yU3RhdHVzKGMuc3RhdGUpXG5cbiAgICBpZiAoc3RhY2tlZF9kb2NrZXIpXG4gICAgICBkb2NrZXJfdGFibGUucHVzaChbaWQsIGMuaW1hZ2UsIHN0YXRlLCBgJHtjcHV9JWAsIGAke21lbX1tYmBdKVxuICAgIGVsc2Uge1xuICAgICAgZG9ja2VyX3RhYmxlLnB1c2goW1xuICAgICAgICBpZCxcbiAgICAgICAgYy5pbWFnZSxcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIGMucmVzdGFydENvdW50LFxuICAgICAgICBgJHtjcHUgPT0gMCA/ICcwJyA6IGNwdX0lYCxcbiAgICAgICAgYCR7bWVtfW1iYCxcbiAgICAgICAgYCR7Yy5zdGF0cy5uZXRJTy5yeH0vJHtpc05hTihjLnN0YXRzLm5ldElPLnR4KSA9PSB0cnVlID8gJzAuMCcgOiBjLnN0YXRzLm5ldElPLnR4fWAsXG4gICAgICAgIGAke2Muc3RhdHMuYmxvY2tJTy5yfS8ke2Muc3RhdHMuYmxvY2tJTy53fWBcbiAgICAgIF0pXG4gICAgfVxuICB9KVxuXG4gIGNvbnNvbGUubG9nKGNoYWxrLmJvbGQoYENvbnRhaW5lciR7c3lzX2luZm9zLmNvbnRhaW5lcnMubGVuZ3RoID4gMSA/ICdzJyA6ICcnfWApKVxuICBjb25zb2xlLmxvZyhkb2NrZXJfdGFibGUudG9TdHJpbmcoKSlcbn1cblxuLyoqXG4gKiBIaWdoIHJlc291cmNlIHByb2Nlc3Nlc1xuICovXG5mdW5jdGlvbiBsaXN0SGlnaFJlc291cmNlc1Byb2Nlc3NlcyhzeXNfaW5mb3MpIHtcbiAgY29uc3QgQ1BVX01JTl9TSE9XID0gNjBcbiAgY29uc3QgTUVNX01JTl9TSE9XID0gMzBcblxuICB2YXIgc3lzX3Byb2NfaGVhZCA9IFsnaWQnLCAnY21kJywgJ3BpZCcsICdjcHUnLCAnbWVtJywgJ3VpZCddXG5cbiAgdmFyIHN5c19wcm9jX3RhYmxlID0gbmV3IFRhYmxlKHtcbiAgICBjb2xXaWR0aHM6IFs0LCBDT05ERU5TRURfTU9ERSA/IDI5IDogNzcsIDEwLCAxMCwgMTAsIDhdLFxuICAgIGhlYWQgOiBzeXNfcHJvY19oZWFkLFxuICAgIGNvbEFsaWducyA6IFsnbGVmdCddLFxuICAgIHN0eWxlIDogeydwYWRkaW5nLWxlZnQnIDogMSwgaGVhZCA6IFsnY3lhbicsICdib2xkJ10sICBjb21wYWN0IDogdHJ1ZX1cbiAgfSlcblxuICBzeXNfaW5mb3MucHJvY2Vzc2VzLmNwdV9zb3J0ZWQgPSBzeXNfaW5mb3MucHJvY2Vzc2VzLmNwdV9zb3J0ZWQuZmlsdGVyKChwcm9jKSA9PiB7XG4gICAgcmV0dXJuIHByb2MuY3B1ID4gQ1BVX01JTl9TSE9XICYmIHByb2MuY21kLmluY2x1ZGVzKCdub2RlJykgPT09IGZhbHNlICYmXG4gICAgICBwcm9jLmNtZC5pbmNsdWRlcygnR29kIERhZW1vbicpID09PSBmYWxzZVxuICB9KVxuXG4gIHN5c19pbmZvcy5wcm9jZXNzZXMuY3B1X3NvcnRlZC5mb3JFYWNoKHByb2MgPT4ge1xuICAgIHZhciBjcHUgPSBgJHtVeEhlbHBlcnMuY29sb3JpemVkTWV0cmljKHByb2MuY3B1LCA0MCwgNzAsICclJyl9YFxuICAgIHZhciBtZW0gPSBgJHtVeEhlbHBlcnMuY29sb3JpemVkTWV0cmljKHByb2MubWVtb3J5LCA0MCwgNzAsICclJyl9YFxuICAgIHZhciBjbWQgPSBwcm9jLmNtZFxuICAgIHN5c19wcm9jX3RhYmxlLnB1c2goW2NoYWxrLmJvbGQuY3lhbihwcm9jX2lkKyspLCBjbWQsIHByb2MucGlkLCBjcHUsIG1lbSwgcHJvYy51aWRdKVxuICB9KVxuXG4gIHN5c19pbmZvcy5wcm9jZXNzZXMubWVtX3NvcnRlZCA9IHN5c19pbmZvcy5wcm9jZXNzZXMubWVtX3NvcnRlZC5maWx0ZXIoKHByb2MpID0+IHtcbiAgICByZXR1cm4gcHJvYy5tZW1vcnkgPiBNRU1fTUlOX1NIT1cgJiYgcHJvYy5jbWQuaW5jbHVkZXMoJ25vZGUnKSA9PSBmYWxzZVxuICB9KVxuXG4gIHN5c19pbmZvcy5wcm9jZXNzZXMubWVtX3NvcnRlZC5mb3JFYWNoKChwcm9jKSA9PiB7XG4gICAgdmFyIGNwdSA9IGAke1V4SGVscGVycy5jb2xvcml6ZWRNZXRyaWMocHJvYy5jcHUsIDQwLCA3MCwgJyUnKX1gXG4gICAgdmFyIG1lbSA9IGAke1V4SGVscGVycy5jb2xvcml6ZWRNZXRyaWMocHJvYy5tZW1vcnksIDQwLCA3MCwgJyUnKX1gXG4gICAgdmFyIGNtZCA9IHByb2MuY21kXG4gICAgLy8gaWYgKHByb2MuY21kLmxlbmd0aCA+IDUwKVxuICAgIC8vICAgY21kID0gJ+KApicgKyBwcm9jLmNtZC5zbGljZShwcm9jLmNtZC5sZW5ndGggLSA0OCwgcHJvYy5jbWQubGVuZ3RoKVxuICAgIHN5c19wcm9jX3RhYmxlLnB1c2goW2NoYWxrLmJvbGQuY3lhbihwcm9jX2lkKyspLCBjbWQsIHByb2MucGlkLCBjcHUsIG1lbSwgcHJvYy51aWRdKVxuICB9KVxuXG4gIGlmIChzeXNfaW5mb3MucHJvY2Vzc2VzLmNwdV9zb3J0ZWQubGVuZ3RoID49IDEgfHwgc3lzX2luZm9zLnByb2Nlc3Nlcy5tZW1fc29ydGVkLmxlbmd0aCA+PSAxKSB7XG4gICAgY29uc29sZS5sb2coY2hhbGsuYm9sZCgnSW50ZW5zaXZlIFByb2Nlc3NlcycpKVxuICAgIGNvbnNvbGUubG9nKHN5c19wcm9jX3RhYmxlLnRvU3RyaW5nKCkpXG4gIH1cbn1cblxuLyoqXG4gKiBTeXMgaW5mbyBsaW5lXG4gKi9cbmZ1bmN0aW9uIG1pbmlNb25pdEJhcihzeXNfaW5mb3MpIHtcbiAgdmFyIHN5c19zdW1tYXJ5X2xpbmUgPSBgJHtjaGFsay5ib2xkLmN5YW4oJ2hvc3QgbWV0cmljcycpfSBgXG4gIHN5c19zdW1tYXJ5X2xpbmUgKz0gYHwgJHtjaGFsay5ib2xkKCdjcHUnKX06ICR7VXhIZWxwZXJzLmNvbG9yaXplZE1ldHJpYyhzeXNfaW5mb3MuY3B1LnVzYWdlLCA0MCwgNzAsICclJyl9YFxuICBpZiAoc3lzX2luZm9zLmNwdS50ZW1wZXJhdHVyZSAmJiBzeXNfaW5mb3MuY3B1LnRlbXBlcmF0dXJlICE9ICctMScpIHtcbiAgICBzeXNfc3VtbWFyeV9saW5lICs9IGAgJHtVeEhlbHBlcnMuY29sb3JpemVkTWV0cmljKHN5c19pbmZvcy5jcHUudGVtcGVyYXR1cmUsIDUwLCA3MCwgJ8K6Jyl9YFxuICB9XG4gIGlmIChzeXNfaW5mb3MubWVtKSB7XG4gICAgdmFyIHBlcmNfbWVtX3VzYWdlID0gKCgoc3lzX2luZm9zLm1lbS5hdmFpbGFibGUpIC8gc3lzX2luZm9zLm1lbS50b3RhbCkgKiAxMDApLnRvRml4ZWQoMSlcbiAgICBzeXNfc3VtbWFyeV9saW5lICs9IGAgfCAke2NoYWxrLmJvbGQoJ21lbSBmcmVlJyl9OiAke1V4SGVscGVycy5jb2xvcml6ZWRNZXRyaWMocGVyY19tZW1fdXNhZ2UsIDMwLCAxMCwgJyUnKX0gYFxuICB9XG4gIGlmIChzeXNfaW5mb3MubmV0d29yaykge1xuICAgIHZhciBsYXRlbmN5ID0gKHN5c19pbmZvcy5uZXR3b3JrLmxhdGVuY3kpLnRvRml4ZWQoMSlcbiAgICBpZiAobGF0ZW5jeSA9PSAtMSkge1xuICAgICAgc3lzX3N1bW1hcnlfbGluZSArPSBgfCAke2NoYWxrLmJvbGQoJ25ldCcpfTogJHtjaGFsay5yZWQoJ29mZmxpbmUnKX0gYFxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHN5c19zdW1tYXJ5X2xpbmUgKz0gYHwgJHtjaGFsay5ib2xkKCduZXQnKX06IGBcbiAgICAgIC8vc3lzX3N1bW1hcnlfbGluZSArPSBgJHtjb2xvcml6ZWRNZXRyaWMobGF0ZW5jeSwgMTAwLCAxNTAsICdtcycpfSBgXG4gICAgICBzeXNfc3VtbWFyeV9saW5lICs9IGDih5MgJHtVeEhlbHBlcnMuY29sb3JpemVkTWV0cmljKHN5c19pbmZvcy5uZXR3b3JrLnJ4XzUsIDEwLCAyMCwgJ21iL3MnKX0gYFxuICAgICAgc3lzX3N1bW1hcnlfbGluZSArPSBg4oeRICR7VXhIZWxwZXJzLmNvbG9yaXplZE1ldHJpYyhzeXNfaW5mb3MubmV0d29yay50eF81LCAxMCwgMjAsICdtYi9zJyl9IGBcbiAgICB9XG4gIH1cbiAgaWYgKENPTkRFTlNFRF9NT0RFID09IGZhbHNlKSB7XG4gICAgaWYgKHN5c19pbmZvcy5zdG9yYWdlKSB7XG4gICAgICBzeXNfc3VtbWFyeV9saW5lICs9IGB8ICR7Y2hhbGsuYm9sZCgnZGlzaycpfTog4oeTICR7VXhIZWxwZXJzLmNvbG9yaXplZE1ldHJpYyhzeXNfaW5mb3Muc3RvcmFnZS5pby5yZWFkLCAxMCwgMjAsICdtYi9zJyl9YFxuICAgICAgc3lzX3N1bW1hcnlfbGluZSArPSBgIOKHkSAke1V4SGVscGVycy5jb2xvcml6ZWRNZXRyaWMoc3lzX2luZm9zLnN0b3JhZ2UuaW8ud3JpdGUsIDEwLCAyMCwgJ21iL3MnKX0gYFxuICAgIH1cbiAgICB2YXIgZGlza19uYiA9IDBcblxuICAgIHN5c19pbmZvcy5zdG9yYWdlLmZpbGVzeXN0ZW1zLmZvckVhY2goZnMgPT4ge1xuICAgICAgZGlza19uYisrXG4gICAgICB2YXIgcGVyY191c2VkID0gKChmcy51c2VkIC8gZnMuc2l6ZSkgKiAxMDApLnRvRml4ZWQoKVxuICAgICAgaWYgKCtwZXJjX3VzZWQgPiA2MClcbiAgICAgICAgc3lzX3N1bW1hcnlfbGluZSArPSBgJHtjaGFsay5ncmV5KGZzLmZzKX0gJHtVeEhlbHBlcnMuY29sb3JpemVkTWV0cmljKHBlcmNfdXNlZCwgODAsIDkwLCAnJScpfSBgXG4gICAgfSlcbiAgfVxuXG4gIHN5c19zdW1tYXJ5X2xpbmUgKz0gJ3wnXG4gIGNvbnNvbGUubG9nKHN5c19zdW1tYXJ5X2xpbmUpXG59XG5cbi8qKlxuICogcG0yIGxzXG4gKiBAbWV0aG9kIGRpc3BBc1RhYmxlXG4gKiBAcGFyYW0ge09iamVjdH0gbGlzdFxuICogQHBhcmFtIHtPYmplY3R9IHN5c3RlbSBpbmZvcm1hdGlvbnMgKHZpYSBwbTIgc3lzbW9uaXQvcG0yIHN5c2luZm9zKVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihsaXN0LCBzeXNfaW5mb3MpIHtcbiAgdmFyIHBtMl9jb25mID0gQ29uZmlndXJhdGlvbi5nZXRTeW5jKCdwbTInKVxuXG4gIGlmICghbGlzdClcbiAgICByZXR1cm4gY29uc29sZS5sb2coJ2xpc3QgZW1wdHknKVxuXG4gIGxpc3RNb2R1bGVzQW5kQXBwc01hbmFnZWQobGlzdClcblxuICBpZiAoc3lzX2luZm9zKSB7XG4gICAgaWYgKHN5c19pbmZvcy5jb250YWluZXJzICYmIHN5c19pbmZvcy5jb250YWluZXJzLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgKHBtMl9jb25mICYmIHBtMl9jb25mLnNob3dfZG9ja2VyID09IFwidHJ1ZVwiKSlcbiAgICAgIGNvbnRhaW5lcnNMaXN0aW5nKHN5c19pbmZvcylcblxuICAgIGlmIChzeXNfaW5mb3MucHJvY2Vzc2VzICYmIChzeXNfaW5mb3MucHJvY2Vzc2VzLmNwdV9zb3J0ZWQgfHwgc3lzX2luZm9zLnByb2Nlc3Nlcy5tZW1fc29ydGVkKSlcbiAgICAgIGxpc3RIaWdoUmVzb3VyY2VzUHJvY2Vzc2VzKHN5c19pbmZvcylcblxuICAgIGlmIChzeXNfaW5mb3MuY3B1ICYmIHN5c19pbmZvcy5jcHUudXNhZ2UpXG4gICAgICBtaW5pTW9uaXRCYXIoc3lzX2luZm9zKVxuICB9XG5cbiAgLy9jaGVja0lmUHJvY2Vzc0FyZUR1bXBlZChsaXN0KVxufVxuIl19