"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _default;

var _constants = _interopRequireDefault(require("../../../constants"));

var _Common = _interopRequireDefault(require("../../Common"));

var _chalk = _interopRequireDefault(require("chalk"));

var _fs = _interopRequireDefault(require("fs"));

var _InteractorClient = _interopRequireDefault(require("@pm2/agent/src/InteractorClient"));

var _package = _interopRequireDefault(require("../../../package.json"));

function _default(CLI) {
  CLI.prototype.linkManagement = function (cmd, public_key, machine, opts, cb) {
    var that = this; // pm2 link stop || kill

    if (cmd == 'stop' || cmd == 'kill') {
      that.gl_is_km_linked = false;
      console.log(_constants["default"].PM2_IO_MSG + ' Stopping agent...');
      return that.killAgent(function (err) {
        if (err) {
          _Common["default"].printError(err);

          return process.exit(_constants["default"].ERROR_EXIT);
        }

        console.log(_constants["default"].PM2_IO_MSG + ' Stopped');
        that.reload('all', function () {
          return process.exit(_constants["default"].SUCCESS_EXIT);
        });
      });
    } // pm2 link info


    if (cmd == 'info') {
      console.log(_constants["default"].PM2_IO_MSG + ' Getting agent information...');
      that.agentInfos(function (err, infos) {
        if (err) {
          console.error(_constants["default"].PM2_IO_MSG_ERR + ' ' + err.message);
          return that.exitCli(_constants["default"].ERROR_EXIT);
        }

        console.log(infos);
        return that.exitCli(_constants["default"].SUCCESS_EXIT);
      });
      return false;
    } // pm2 link delete


    if (cmd == 'delete') {
      that.gl_is_km_linked = false;
      console.log(_constants["default"].PM2_IO_MSG + ' Permanently disable agent...');
      that.killAgent(function (err) {
        try {
          _fs["default"].unlinkSync(_constants["default"].INTERACTION_CONF);
        } catch (e) {
          console.log(_constants["default"].PM2_IO_MSG + ' No interaction config file found');
          return process.exit(_constants["default"].SUCCESS_EXIT);
        }

        console.log(_constants["default"].PM2_IO_MSG + ' Agent interaction ended');
        if (!cb) return process.exit(_constants["default"].SUCCESS_EXIT);
        return cb();
      });
      return false;
    }

    if (cmd && !public_key) {
      console.error(_constants["default"].PM2_IO_MSG + ' Command [%s] unknown or missing public key', cmd);
      return process.exit(_constants["default"].ERROR_EXIT);
    } // pm2 link xxx yyy


    var infos;

    if (!cmd) {
      infos = null;
    } else infos = {
      public_key: public_key,
      secret_key: cmd,
      machine_name: machine,
      info_node: opts.infoNode || null,
      pm2_version: _package["default"].version
    };

    if (opts && opts.axon === true && infos) {
      infos.agent_transport_axon = true;
      infos.agent_transport_websocket = false;
      process.env.AGENT_TRANSPORT_AXON = "true";
      process.env.AGENT_TRANSPORT_WEBSOCKET = "false";
    } else if (infos) {
      infos.agent_transport_axon = false;
      infos.agent_transport_websocket = true;
      process.env.AGENT_TRANSPORT_AXON = "false";
      process.env.AGENT_TRANSPORT_WEBSOCKET = "true";
    }

    that.link(infos, cb);
  };

  CLI.prototype.link = function (infos, cb) {
    var that = this;
    if (infos && !infos.machine_name) infos.machine_name = require('os').hostname() + '-' + require('crypto').randomBytes(2).toString('hex');

    _InteractorClient["default"].launchAndInteract(_constants["default"], infos, function (err, dt) {
      if (err) {
        _Common["default"].printError(_constants["default"].PM2_IO_MSG + ' Run `$ pm2 plus` to connect');

        return that.exitCli(_constants["default"].ERROR_EXIT);
      }

      console.log(_chalk["default"].bold.green('[+] PM2+ activated!'));

      if (!cb) {
        return that.exitCli(_constants["default"].SUCCESS_EXIT);
      }

      return cb(null, dt);
    });
  };

  CLI.prototype.agentInfos = function (cb) {
    _InteractorClient["default"].getInteractInfo(this._conf, function (err, data) {
      if (err) return cb(_Common["default"].retErr(err));
      return cb(null, data);
    });
  };

  CLI.prototype.killAgent = function (cb) {
    var that = this;

    _InteractorClient["default"].killInteractorDaemon(that._conf, function (err) {
      if (err) return cb ? cb(_Common["default"].retErr(err)) : that.exitCli(_constants["default"].SUCCESS_EXIT);
      return cb ? cb(null) : that.exitCli(_constants["default"].SUCCESS_EXIT);
    });
  };

  CLI.prototype.unlink = function (cb) {
    this.linkManagement('delete', cb);
  };
}

;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,