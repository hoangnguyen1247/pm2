"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _util = _interopRequireDefault(require("util"));

var _chalk = _interopRequireDefault(require("chalk"));

var _forEachLimit = _interopRequireDefault(require("async/forEachLimit"));

var _dayjs = _interopRequireDefault(require("dayjs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * Copyright 2013 the PM2 project authors. All rights reserved.
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */
var Log = {};
var DEFAULT_PADDING = '          ';
/**
 * Tail logs from file stream.
 * @param {Object} apps_list
 * @param {Number} lines
 * @param {Boolean} raw
 * @param {Function} callback
 * @return
 */

Log.tail = function (apps_list, lines, raw, callback) {
  var that = this;
  if (lines === 0 || apps_list.length === 0) return callback && callback();
  var count = 0;

  var getLastLines = function getLastLines(filename, lines, callback) {
    var chunk = '';
    var size = Math.max(0, _fs["default"].statSync(filename).size - lines * 200);
    var chunkArr;

    var fd = _fs["default"].createReadStream(filename, {
      start: size
    });

    fd.on('data', function (data) {
      chunk += data.toString();
    });
    fd.on('end', function () {
      chunkArr = chunk.split('\n').slice(-(lines + 1));
      chunkArr.pop();
      callback(chunkArr);
    });
  };

  apps_list.sort(function (a, b) {
    return (_fs["default"].existsSync(a.path) ? _fs["default"].statSync(a.path).mtime.valueOf() : 0) - (_fs["default"].existsSync(b.path) ? _fs["default"].statSync(b.path).mtime.valueOf() : 0);
  });
  (0, _forEachLimit["default"])(apps_list, 1, function (app, next) {
    if (!_fs["default"].existsSync(app.path || '')) return next();
    getLastLines(app.path, lines, function (output) {
      console.log(_chalk["default"].grey('%s last %d lines:'), app.path, lines);
      output.forEach(function (out) {
        if (raw) return app.type === 'err' ? console.error(out) : console.log(out);
        if (app.type === 'out') process.stdout.write(_chalk["default"].green(pad(DEFAULT_PADDING, app.app_name) + ' | '));else if (app.type === 'err') process.stdout.write(_chalk["default"].red(pad(DEFAULT_PADDING, app.app_name) + ' | '));else process.stdout.write(_chalk["default"].blue(pad(DEFAULT_PADDING, 'PM2') + ' | '));
        console.log(out);
      });
      if (output.length) process.stdout.write('\n');
      next();
    });
  }, function () {
    callback && callback();
  });
};
/**
 * Stream logs in realtime from the bus eventemitter.
 * @param {String} id
 * @param {Boolean} raw
 * @return
 */


Log.stream = function (Client, id, raw, timestamp, exclusive, highlight) {
  var that = this;
  Client.launchBus(function (err, bus, socket) {
    socket.on('reconnect attempt', function () {
      if (global._auto_exit === true) {
        if (timestamp) process.stdout.write(_chalk["default"]['dim'](_chalk["default"].grey((0, _dayjs["default"])().format(timestamp) + ' ')));
        process.stdout.write(_chalk["default"].blue(pad(DEFAULT_PADDING, 'PM2') + ' | ') + '[[[ Target PM2 killed. ]]]');
        process.exit(0);
      }
    });
    var min_padding = 3;
    bus.on('log:*', function (type, packet) {
      if (id !== 'all' && packet.process.name != id && packet.process.pm_id != id) return;
      if (type === 'out' && exclusive === 'err' || type === 'err' && exclusive === 'out' || type === 'PM2' && exclusive !== false) return;
      var lines;
      if (typeof packet.data === 'string') lines = (packet.data || '').split('\n');else return;
      lines.forEach(function (line) {
        if (!line || line.length === 0) return;
        if (raw) return type === 'err' ? process.stderr.write(_util["default"].format(line) + '\n') : process.stdout.write(_util["default"].format(line) + '\n');
        if (timestamp) process.stdout.write(_chalk["default"]['dim'](_chalk["default"].grey((0, _dayjs["default"])().format(timestamp) + ' ')));
        var name = packet.process.pm_id + '|' + packet.process.name;
        if (name.length > min_padding) min_padding = name.length + 1;
        if (type === 'out') process.stdout.write(_chalk["default"].green(pad(' '.repeat(min_padding), name) + ' | '));else if (type === 'err') process.stdout.write(_chalk["default"].red(pad(' '.repeat(min_padding), name) + ' | '));else if (!raw && (id === 'all' || id === 'PM2')) process.stdout.write(_chalk["default"].blue(pad(' '.repeat(min_padding), 'PM2') + ' | '));
        if (highlight) process.stdout.write(_util["default"].format(line).replace(highlight, _chalk["default"].bgBlackBright(highlight)) + '\n');else process.stdout.write(_util["default"].format(line) + '\n');
      });
    });
  });
};

Log.devStream = function (Client, id, raw, timestamp, exclusive) {
  var that = this;
  Client.launchBus(function (err, bus) {
    setTimeout(function () {
      bus.on('process:event', function (packet) {
        if (packet.event == 'online') console.log(_chalk["default"].green('[rundev] App %s restarted'), packet.process.name);
      });
    }, 1000);
    var min_padding = 3;
    bus.on('log:*', function (type, packet) {
      if (id !== 'all' && packet.process.name != id && packet.process.pm_id != id) return;
      if (type === 'out' && exclusive === 'err' || type === 'err' && exclusive === 'out' || type === 'PM2' && exclusive !== false) return;
      if (type === 'PM2') return;
      var name = packet.process.pm_id + '|' + packet.process.name;
      var lines;
      if (typeof packet.data === 'string') lines = (packet.data || '').split('\n');else return;
      lines.forEach(function (line) {
        if (!line || line.length === 0) return;
        if (raw) return process.stdout.write(_util["default"].format(line) + '\n');
        if (timestamp) process.stdout.write(_chalk["default"]['dim'](_chalk["default"].grey((0, _dayjs["default"])().format(timestamp) + ' ')));
        var name = packet.process.name + '-' + packet.process.pm_id;
        if (name.length > min_padding) min_padding = name.length + 1;
        if (type === 'out') process.stdout.write(_chalk["default"].green(pad(' '.repeat(min_padding), name) + ' | '));else if (type === 'err') process.stdout.write(_chalk["default"].red(pad(' '.repeat(min_padding), name) + ' | '));else if (!raw && (id === 'all' || id === 'PM2')) process.stdout.write(_chalk["default"].blue(pad(' '.repeat(min_padding), 'PM2') + ' | '));
        process.stdout.write(_util["default"].format(line) + '\n');
      });
    });
  });
};

Log.jsonStream = function (Client, id) {
  var that = this;
  Client.launchBus(function (err, bus) {
    if (err) console.error(err);
    bus.on('process:event', function (packet) {
      process.stdout.write(JSON.stringify({
        timestamp: (0, _dayjs["default"])(packet.at),
        type: 'process_event',
        status: packet.event,
        app_name: packet.process.name
      }));
      process.stdout.write('\n');
    });
    bus.on('log:*', function (type, packet) {
      if (id !== 'all' && packet.process.name != id && packet.process.pm_id != id) return;
      if (type === 'PM2') return;
      if (typeof packet.data == 'string') packet.data = packet.data.replace(/(\r\n|\n|\r)/gm, '');
      process.stdout.write(JSON.stringify({
        message: packet.data,
        timestamp: (0, _dayjs["default"])(packet.at),
        type: type,
        process_id: packet.process.pm_id,
        app_name: packet.process.name
      }));
      process.stdout.write('\n');
    });
  });
};

Log.formatStream = function (Client, id, raw, timestamp, exclusive, highlight) {
  var that = this;
  Client.launchBus(function (err, bus) {
    bus.on('log:*', function (type, packet) {
      if (id !== 'all' && packet.process.name != id && packet.process.pm_id != id) return;
      if (type === 'out' && exclusive === 'err' || type === 'err' && exclusive === 'out' || type === 'PM2' && exclusive !== false) return;
      if (type === 'PM2' && raw) return;
      var name = packet.process.name + '-' + packet.process.pm_id;
      var lines;
      if (typeof packet.data === 'string') lines = (packet.data || '').split('\n');else return;
      lines.forEach(function (line) {
        if (!line || line.length === 0) return;

        if (!raw) {
          if (timestamp) process.stdout.write('timestamp=' + (0, _dayjs["default"])().format(timestamp) + ' ');
          if (packet.process.name === 'PM2') process.stdout.write('app=pm2 ');
          if (packet.process.name !== 'PM2') process.stdout.write('app=' + packet.process.name + ' id=' + packet.process.pm_id + ' ');
          if (type === 'out') process.stdout.write('type=out ');else if (type === 'err') process.stdout.write('type=error ');
        }

        process.stdout.write('message=');
        if (highlight) process.stdout.write(_util["default"].format(line).replace(highlight, _chalk["default"].bgBlackBright(highlight)) + '\n');else process.stdout.write(_util["default"].format(line) + '\n');
      });
    });
  });
};

function pad(pad, str, padLeft) {
  if (typeof str === 'undefined') return pad;

  if (padLeft) {
    return (pad + str).slice(-pad.length);
  } else {
    return (str + pad).substring(0, pad.length);
  }
}

var _default = Log;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,