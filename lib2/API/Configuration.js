"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _default;

var _Common = _interopRequireDefault(require("../Common"));

var _constants = _interopRequireDefault(require("../../constants"));

var _UX = _interopRequireDefault(require("./UX"));

var _chalk = _interopRequireDefault(require("chalk"));

var _Configuration = _interopRequireDefault(require("../Configuration"));

function _default(CLI) {
  CLI.prototype.get = function (key, cb) {
    var that = this;

    if (!key || key == 'all') {
      displayConf(function (err, data) {
        if (err) return cb ? cb(_Common["default"].retErr(err)) : that.exitCli(_constants["default"].ERROR_EXIT);
        return cb ? cb(null, {
          success: true
        }) : that.exitCli(_constants["default"].SUCCESS_EXIT);
      });
      return false;
    }

    _Configuration["default"].get(key, function (err, data) {
      if (err) {
        return cb ? cb(_Common["default"].retErr(err)) : that.exitCli(_constants["default"].ERROR_EXIT);
      } // pm2 conf module-name


      if (key.indexOf(':') === -1 && key.indexOf('.') === -1) {
        displayConf(key, function () {
          console.log('Modules configuration. Copy/Paste line to edit values.');
          return cb ? cb(null, {
            success: true
          }) : that.exitCli(_constants["default"].SUCCESS_EXIT);
        });
        return false;
      } // pm2 conf module-name:key


      var module_name, key_name;

      if (key.indexOf(':') > -1) {
        module_name = key.split(':')[0];
        key_name = key.split(':')[1];
      } else if (key.indexOf('.') > -1) {
        module_name = key.split('.')[0];
        key_name = key.split('.')[1];
      }

      _Common["default"].printOut('Value for module ' + _chalk["default"].blue(module_name), 'key ' + _chalk["default"].blue(key_name) + ': ' + _chalk["default"].bold.green(data));

      return cb ? cb(null, {
        success: true
      }) : that.exitCli(_constants["default"].SUCCESS_EXIT);
    });
  };

  CLI.prototype.set = function (key, value, cb) {
    var that = this;

    if (!key) {
      interactiveConfigEdit(function (err) {
        if (err) return cb ? cb(_Common["default"].retErr(err)) : that.exitCli(_constants["default"].ERROR_EXIT);
        return cb ? cb(null, {
          success: true
        }) : that.exitCli(_constants["default"].SUCCESS_EXIT);
      });
      return false;
    }
    /**
     * Set value
     */


    _Configuration["default"].set(key, value, function (err) {
      if (err) return cb ? cb(_Common["default"].retErr(err)) : that.exitCli(_constants["default"].ERROR_EXIT);
      var values = [];
      if (key.indexOf('.') > -1) values = key.split('.');
      if (key.indexOf(':') > -1) values = key.split(':');

      if (values && values.length > 1) {
        // The first element is the app name (module_conf.json)
        var app_name = values[0];
        process.env.PM2_PROGRAMMATIC = 'true';
        that.restart(app_name, {
          updateEnv: true
        }, function (err, data) {
          process.env.PM2_PROGRAMMATIC = 'false';
          if (!err) _Common["default"].printOut(_constants["default"].PREFIX_MSG + 'Module %s restarted', app_name);

          _Common["default"].log('Setting changed');

          displayConf(app_name, function () {
            return cb ? cb(null, {
              success: true
            }) : that.exitCli(_constants["default"].SUCCESS_EXIT);
          });
        });
        return false;
      }

      displayConf(null, function () {
        return cb ? cb(null, {
          success: true
        }) : that.exitCli(_constants["default"].SUCCESS_EXIT);
      });
    });
  };

  CLI.prototype.multiset = function (serial, cb) {
    var that = this;

    _Configuration["default"].multiset(serial, function (err, data) {
      if (err) return cb ? cb({
        success: false,
        err: err
      }) : that.exitCli(_constants["default"].ERROR_EXIT);
      var values = [];
      var key = serial.match(/(?:[^ "]+|"[^"]*")+/g)[0];
      if (key.indexOf('.') > -1) values = key.split('.');
      if (key.indexOf(':') > -1) values = key.split(':');

      if (values && values.length > 1) {
        // The first element is the app name (module_conf.json)
        var app_name = values[0];
        process.env.PM2_PROGRAMMATIC = 'true';
        that.restart(app_name, {
          updateEnv: true
        }, function (err, data) {
          process.env.PM2_PROGRAMMATIC = 'false';
          if (!err) _Common["default"].printOut(_constants["default"].PREFIX_MSG + 'Module %s restarted', app_name);
          displayConf(app_name, function () {
            return cb ? cb(null, {
              success: true
            }) : that.exitCli(_constants["default"].SUCCESS_EXIT);
          });
        });
        return false;
      }

      displayConf(app_name, function () {
        return cb ? cb(null, {
          success: true
        }) : that.exitCli(_constants["default"].SUCCESS_EXIT);
      });
    });
  };

  CLI.prototype.unset = function (key, cb) {
    var that = this;

    _Configuration["default"].unset(key, function (err) {
      if (err) {
        return cb ? cb(_Common["default"].retErr(err)) : that.exitCli(_constants["default"].ERROR_EXIT);
      }

      displayConf(function () {
        cb ? cb(null, {
          success: true
        }) : that.exitCli(_constants["default"].SUCCESS_EXIT);
      });
    });
  };

  CLI.prototype.conf = function (key, value, cb) {
    var that = this;

    if (typeof value === 'function') {
      cb = value;
      value = null;
    } // If key + value = set


    if (key && value) {
      that.set(key, value, function (err) {
        if (err) return cb ? cb(_Common["default"].retErr(err)) : that.exitCli(_constants["default"].ERROR_EXIT);
        return cb ? cb(null, {
          success: true
        }) : that.exitCli(_constants["default"].SUCCESS_EXIT);
      });
    } // If only key = get
    else if (key) {
        that.get(key, function (err, data) {
          if (err) return cb ? cb(_Common["default"].retErr(err)) : that.exitCli(_constants["default"].ERROR_EXIT);
          return cb ? cb(null, {
            success: true
          }) : that.exitCli(_constants["default"].SUCCESS_EXIT);
        });
      } else {
        interactiveConfigEdit(function (err) {
          if (err) return cb ? cb(_Common["default"].retErr(err)) : that.exitCli(_constants["default"].ERROR_EXIT);
          return cb ? cb(null, {
            success: true
          }) : that.exitCli(_constants["default"].SUCCESS_EXIT);
        });
      }
  };
}

;

function interactiveConfigEdit(cb) {
  _UX["default"].helpers.openEditor(_constants["default"].PM2_MODULE_CONF_FILE, function (err, data) {
    _Common["default"].printOut(_chalk["default"].bold('Module configuration (%s) edited.'), _constants["default"].PM2_MODULE_CONF_FILE);

    _Common["default"].printOut(_chalk["default"].bold('To take changes into account, please restart module related.'), _constants["default"].PM2_MODULE_CONF_FILE);

    if (err) return cb(_Common["default"].retErr(err));
    return cb(null, {
      success: true
    });
  });
}
/**
 * Configuration
 */


function displayConf(target_app, cb) {
  if (typeof target_app == 'function') {
    cb = target_app;
    target_app = null;
  }

  _Configuration["default"].getAll(function (err, data) {
    _UX["default"].helpers.dispKeys(data, target_app);

    return cb();
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,