"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _path = _interopRequireDefault(require("path"));

var _child_process = _interopRequireDefault(require("child_process"));

var DEFAULT_MAXBUFFER_SIZE = 20 * 1024 * 1024;

function _exec(command, options, callback) {
  options = options || {};

  if (typeof options === 'function') {
    callback = options;
  }

  if ((0, _typeof2["default"])(options) === 'object' && typeof callback === 'function') {
    options.async = true;
  }

  if (!command) {
    try {
      console.error('[sexec] must specify command');
    } catch (e) {
      return;
    }
  }

  options = Object.assign({
    silent: false,
    cwd: _path["default"].resolve(process.cwd()).toString(),
    env: process.env,
    maxBuffer: DEFAULT_MAXBUFFER_SIZE,
    encoding: 'utf8'
  }, options);

  var c = _child_process["default"].exec(command, options, function (err, stdout, stderr) {
    if (callback) {
      if (!err) {
        callback(0, stdout, stderr);
      } else if (err.code === undefined) {
        // See issue #536

        /* istanbul ignore next */
        callback(1, stdout, stderr);
      } else {
        callback(err.code, stdout, stderr);
      }
    }
  });

  if (!options.silent) {
    c.stdout.pipe(process.stdout);
    c.stderr.pipe(process.stderr);
  }
}

var _default = _exec;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90b29scy9zZXhlYy50cyJdLCJuYW1lcyI6WyJERUZBVUxUX01BWEJVRkZFUl9TSVpFIiwiX2V4ZWMiLCJjb21tYW5kIiwib3B0aW9ucyIsImNhbGxiYWNrIiwiYXN5bmMiLCJjb25zb2xlIiwiZXJyb3IiLCJlIiwiT2JqZWN0IiwiYXNzaWduIiwic2lsZW50IiwiY3dkIiwicGF0aCIsInJlc29sdmUiLCJwcm9jZXNzIiwidG9TdHJpbmciLCJlbnYiLCJtYXhCdWZmZXIiLCJlbmNvZGluZyIsImMiLCJjaGlsZCIsImV4ZWMiLCJlcnIiLCJzdGRvdXQiLCJzdGRlcnIiLCJjb2RlIiwidW5kZWZpbmVkIiwicGlwZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFDQTs7QUFFQTs7QUFFQSxJQUFJQSxzQkFBc0IsR0FBRyxLQUFLLElBQUwsR0FBWSxJQUF6Qzs7QUFFQSxTQUFTQyxLQUFULENBQWVDLE9BQWYsRUFBd0JDLE9BQXhCLEVBQWtDQyxRQUFsQyxFQUE2QztBQUMzQ0QsRUFBQUEsT0FBTyxHQUFHQSxPQUFPLElBQUksRUFBckI7O0FBRUEsTUFBSSxPQUFPQSxPQUFQLEtBQW1CLFVBQXZCLEVBQW1DO0FBQ2pDQyxJQUFBQSxRQUFRLEdBQUdELE9BQVg7QUFDRDs7QUFFRCxNQUFJLHlCQUFPQSxPQUFQLE1BQW1CLFFBQW5CLElBQStCLE9BQU9DLFFBQVAsS0FBb0IsVUFBdkQsRUFBbUU7QUFDakVELElBQUFBLE9BQU8sQ0FBQ0UsS0FBUixHQUFnQixJQUFoQjtBQUNEOztBQUVELE1BQUksQ0FBQ0gsT0FBTCxFQUFjO0FBQ1osUUFBSTtBQUNGSSxNQUFBQSxPQUFPLENBQUNDLEtBQVIsQ0FBYyw4QkFBZDtBQUNELEtBRkQsQ0FFRSxPQUFPQyxDQUFQLEVBQVU7QUFDVjtBQUNEO0FBQ0Y7O0FBRURMLEVBQUFBLE9BQU8sR0FBR00sTUFBTSxDQUFDQyxNQUFQLENBQWM7QUFDdEJDLElBQUFBLE1BQU0sRUFBRSxLQURjO0FBRXRCQyxJQUFBQSxHQUFHLEVBQUVDLGlCQUFLQyxPQUFMLENBQWFDLE9BQU8sQ0FBQ0gsR0FBUixFQUFiLEVBQTRCSSxRQUE1QixFQUZpQjtBQUd0QkMsSUFBQUEsR0FBRyxFQUFFRixPQUFPLENBQUNFLEdBSFM7QUFJdEJDLElBQUFBLFNBQVMsRUFBRWxCLHNCQUpXO0FBS3RCbUIsSUFBQUEsUUFBUSxFQUFFO0FBTFksR0FBZCxFQU1QaEIsT0FOTyxDQUFWOztBQVFBLE1BQUlpQixDQUFDLEdBQUdDLDBCQUFNQyxJQUFOLENBQVdwQixPQUFYLEVBQW9CQyxPQUFwQixFQUE2QixVQUFVb0IsR0FBVixFQUFlQyxNQUFmLEVBQXVCQyxNQUF2QixFQUErQjtBQUNsRSxRQUFJckIsUUFBSixFQUFjO0FBQ1osVUFBSSxDQUFDbUIsR0FBTCxFQUFVO0FBQ1JuQixRQUFBQSxRQUFRLENBQUMsQ0FBRCxFQUFJb0IsTUFBSixFQUFZQyxNQUFaLENBQVI7QUFDRCxPQUZELE1BRU8sSUFBSUYsR0FBRyxDQUFDRyxJQUFKLEtBQWFDLFNBQWpCLEVBQTRCO0FBQ2pDOztBQUNBO0FBQ0F2QixRQUFBQSxRQUFRLENBQUMsQ0FBRCxFQUFJb0IsTUFBSixFQUFZQyxNQUFaLENBQVI7QUFDRCxPQUpNLE1BSUE7QUFDTHJCLFFBQUFBLFFBQVEsQ0FBQ21CLEdBQUcsQ0FBQ0csSUFBTCxFQUFXRixNQUFYLEVBQW1CQyxNQUFuQixDQUFSO0FBQ0Q7QUFDRjtBQUNGLEdBWk8sQ0FBUjs7QUFjQSxNQUFJLENBQUN0QixPQUFPLENBQUNRLE1BQWIsRUFBcUI7QUFDbkJTLElBQUFBLENBQUMsQ0FBQ0ksTUFBRixDQUFTSSxJQUFULENBQWNiLE9BQU8sQ0FBQ1MsTUFBdEI7QUFDQUosSUFBQUEsQ0FBQyxDQUFDSyxNQUFGLENBQVNHLElBQVQsQ0FBY2IsT0FBTyxDQUFDVSxNQUF0QjtBQUNEO0FBQ0Y7O2VBRWN4QixLIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBmcyBmcm9tICdmcyc7XG5pbXBvcnQgY2hpbGQgZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5cbnZhciBERUZBVUxUX01BWEJVRkZFUl9TSVpFID0gMjAgKiAxMDI0ICogMTAyNDtcblxuZnVuY3Rpb24gX2V4ZWMoY29tbWFuZCwgb3B0aW9ucz8sIGNhbGxiYWNrPykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gIH1cblxuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuYXN5bmMgPSB0cnVlO1xuICB9XG5cbiAgaWYgKCFjb21tYW5kKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1tzZXhlY10gbXVzdCBzcGVjaWZ5IGNvbW1hbmQnKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe1xuICAgIHNpbGVudDogZmFsc2UsXG4gICAgY3dkOiBwYXRoLnJlc29sdmUocHJvY2Vzcy5jd2QoKSkudG9TdHJpbmcoKSxcbiAgICBlbnY6IHByb2Nlc3MuZW52LFxuICAgIG1heEJ1ZmZlcjogREVGQVVMVF9NQVhCVUZGRVJfU0laRSxcbiAgICBlbmNvZGluZzogJ3V0ZjgnLFxuICB9LCBvcHRpb25zKTtcblxuICB2YXIgYyA9IGNoaWxkLmV4ZWMoY29tbWFuZCwgb3B0aW9ucywgZnVuY3Rpb24gKGVyciwgc3Rkb3V0LCBzdGRlcnIpIHtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGlmICghZXJyKSB7XG4gICAgICAgIGNhbGxiYWNrKDAsIHN0ZG91dCwgc3RkZXJyKTtcbiAgICAgIH0gZWxzZSBpZiAoZXJyLmNvZGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBTZWUgaXNzdWUgIzUzNlxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBjYWxsYmFjaygxLCBzdGRvdXQsIHN0ZGVycik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayhlcnIuY29kZSwgc3Rkb3V0LCBzdGRlcnIpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgaWYgKCFvcHRpb25zLnNpbGVudCkge1xuICAgIGMuc3Rkb3V0LnBpcGUocHJvY2Vzcy5zdGRvdXQpO1xuICAgIGMuc3RkZXJyLnBpcGUocHJvY2Vzcy5zdGRlcnIpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IF9leGVjO1xuIl19