"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

!function (e) {
  function n() {}

  function t(e, n) {
    return function () {
      e.apply(n, arguments);
    };
  }

  function o(e) {
    if ("object" != (0, _typeof2["default"])(this)) throw new TypeError("Promises must be constructed via new");
    if ("function" != typeof e) throw new TypeError("not a function");
    this._state = 0, this._handled = !1, this._value = void 0, this._deferreds = [], s(e, this);
  }

  function i(e, n) {
    for (; 3 === e._state;) {
      e = e._value;
    }

    return 0 === e._state ? void e._deferreds.push(n) : (e._handled = !0, void o._immediateFn(function () {
      var t = 1 === e._state ? n.onFulfilled : n.onRejected;
      if (null === t) return void (1 === e._state ? r : u)(n.promise, e._value);
      var o;

      try {
        o = t(e._value);
      } catch (e) {
        return void u(n.promise, e);
      }

      r(n.promise, o);
    }));
  }

  function r(e, n) {
    try {
      if (n === e) throw new TypeError("A promise cannot be resolved with itself.");

      if (n && ("object" == (0, _typeof2["default"])(n) || "function" == typeof n)) {
        var i = n.then;
        if (n instanceof o) return e._state = 3, e._value = n, void f(e);
        if ("function" == typeof i) return void s(t(i, n), e);
      }

      e._state = 1, e._value = n, f(e);
    } catch (n) {
      u(e, n);
    }
  }

  function u(e, n) {
    e._state = 2, e._value = n, f(e);
  }

  function f(e) {
    2 === e._state && 0 === e._deferreds.length && o._immediateFn(function () {
      e._handled || o._unhandledRejectionFn(e._value);
    });

    for (var n = 0, t = e._deferreds.length; n < t; n++) {
      i(e, e._deferreds[n]);
    }

    e._deferreds = null;
  }

  function c(e, n, t) {
    this.onFulfilled = "function" == typeof e ? e : null, this.onRejected = "function" == typeof n ? n : null, this.promise = t;
  }

  function s(e, n) {
    var t = !1;

    try {
      e(function (e) {
        t || (t = !0, r(n, e));
      }, function (e) {
        t || (t = !0, u(n, e));
      });
    } catch (e) {
      if (t) return;
      t = !0, u(n, e);
    }
  }

  var a = setTimeout;
  o.prototype["catch"] = function (e) {
    return this.then(null, e);
  }, o.prototype.then = function (e, t) {
    var o = new this.constructor(n);
    return i(this, new c(e, t, o)), o;
  }, o.all = function (e) {
    var n = Array.prototype.slice.call(e);
    return new o(function (e, t) {
      function o(r, u) {
        try {
          if (u && ("object" == (0, _typeof2["default"])(u) || "function" == typeof u)) {
            var f = u.then;
            if ("function" == typeof f) return void f.call(u, function (e) {
              o(r, e);
            }, t);
          }

          n[r] = u, 0 === --i && e(n);
        } catch (e) {
          t(e);
        }
      }

      if (0 === n.length) return e([]);

      for (var i = n.length, r = 0; r < n.length; r++) {
        o(r, n[r]);
      }
    });
  }, o.resolve = function (e) {
    return e && "object" == (0, _typeof2["default"])(e) && e.constructor === o ? e : new o(function (n) {
      n(e);
    });
  }, o.reject = function (e) {
    return new o(function (n, t) {
      t(e);
    });
  }, o.race = function (e) {
    return new o(function (n, t) {
      for (var o = 0, i = e.length; o < i; o++) {
        e[o].then(n, t);
      }
    });
  }, o._immediateFn = "function" == typeof setImmediate && function (e) {
    setImmediate(e);
  } || function (e) {
    a(e, 0);
  }, o._unhandledRejectionFn = function (e) {
    "undefined" != typeof console && console && console.warn("Possible Unhandled Promise Rejection:", e);
  }, o._setImmediateFn = function (e) {
    o._immediateFn = e;
  }, o._setUnhandledRejectionFn = function (e) {
    o._unhandledRejectionFn = e;
  }, "undefined" != typeof module && module.exports ? module.exports = o : e.Promise || (e.Promise = o);
}(void 0);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90b29scy9wcm9taXNlLm1pbi5qcyJdLCJuYW1lcyI6WyJlIiwibiIsInQiLCJhcHBseSIsImFyZ3VtZW50cyIsIm8iLCJUeXBlRXJyb3IiLCJfc3RhdGUiLCJfaGFuZGxlZCIsIl92YWx1ZSIsIl9kZWZlcnJlZHMiLCJzIiwiaSIsInB1c2giLCJfaW1tZWRpYXRlRm4iLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJyIiwidSIsInByb21pc2UiLCJ0aGVuIiwiZiIsImxlbmd0aCIsIl91bmhhbmRsZWRSZWplY3Rpb25GbiIsImMiLCJhIiwic2V0VGltZW91dCIsInByb3RvdHlwZSIsImNvbnN0cnVjdG9yIiwiYWxsIiwiQXJyYXkiLCJzbGljZSIsImNhbGwiLCJyZXNvbHZlIiwicmVqZWN0IiwicmFjZSIsInNldEltbWVkaWF0ZSIsImNvbnNvbGUiLCJ3YXJuIiwiX3NldEltbWVkaWF0ZUZuIiwiX3NldFVuaGFuZGxlZFJlamVjdGlvbkZuIiwibW9kdWxlIiwiZXhwb3J0cyIsIlByb21pc2UiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLENBQUMsVUFBU0EsQ0FBVCxFQUFXO0FBQUMsV0FBU0MsQ0FBVCxHQUFZLENBQUU7O0FBQUEsV0FBU0MsQ0FBVCxDQUFXRixDQUFYLEVBQWFDLENBQWIsRUFBZTtBQUFDLFdBQU8sWUFBVTtBQUFDRCxNQUFBQSxDQUFDLENBQUNHLEtBQUYsQ0FBUUYsQ0FBUixFQUFVRyxTQUFWO0FBQXFCLEtBQXZDO0FBQXdDOztBQUFBLFdBQVNDLENBQVQsQ0FBV0wsQ0FBWCxFQUFhO0FBQUMsUUFBRyxxQ0FBaUIsSUFBakIsQ0FBSCxFQUF5QixNQUFNLElBQUlNLFNBQUosQ0FBYyxzQ0FBZCxDQUFOO0FBQTRELFFBQUcsY0FBWSxPQUFPTixDQUF0QixFQUF3QixNQUFNLElBQUlNLFNBQUosQ0FBYyxnQkFBZCxDQUFOO0FBQXNDLFNBQUtDLE1BQUwsR0FBWSxDQUFaLEVBQWMsS0FBS0MsUUFBTCxHQUFjLENBQUMs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QUEsQ0FBQyxDQUFDUyxZQUFGLEdBQWVkLENBQWY7QUFBaUIsR0FBNy9CLEVBQTgvQkssQ0FBQyxDQUFDbUMsd0JBQUYsR0FBMkIsVUFBU3hDLENBQVQsRUFBVztBQUFDSyxJQUFBQSxDQUFDLENBQUNrQixxQkFBRixHQUF3QnZCLENBQXhCO0FBQTBCLEdBQS9qQyxFQUFna0MsZUFBYSxPQUFPeUMsTUFBcEIsSUFBNEJBLE1BQU0sQ0FBQ0MsT0FBbkMsR0FBMkNELE1BQU0sQ0FBQ0MsT0FBUCxHQUFlckMsQ0FBMUQsR0FBNERMLENBQUMsQ0FBQzJDLE9BQUYsS0FBWTNDLENBQUMsQ0FBQzJDLE9BQUYsR0FBVXRDLENBQXRCLENBQTVuQztBQUFxcEMsQ0FBamxGLFFBQUQiLCJzb3VyY2VzQ29udGVudCI6WyIhZnVuY3Rpb24oZSl7ZnVuY3Rpb24gbigpe31mdW5jdGlvbiB0KGUsbil7cmV0dXJuIGZ1bmN0aW9uKCl7ZS5hcHBseShuLGFyZ3VtZW50cyl9fWZ1bmN0aW9uIG8oZSl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIHRoaXMpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByb21pc2VzIG11c3QgYmUgY29uc3RydWN0ZWQgdmlhIG5ld1wiKTtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoXCJub3QgYSBmdW5jdGlvblwiKTt0aGlzLl9zdGF0ZT0wLHRoaXMuX2hhbmRsZWQ9ITEsdGhpcy5fdmFsdWU9dm9pZCAwLHRoaXMuX2RlZmVycmVkcz1bXSxzKGUsdGhpcyl9ZnVuY3Rpb24gaShlLG4pe2Zvcig7Mz09PWUuX3N0YXRlOyllPWUuX3ZhbHVlO3JldHVybiAwPT09ZS5fc3RhdGU/dm9pZCBlLl9kZWZlcnJlZHMucHVzaChuKTooZS5faGFuZGxlZD0hMCx2b2lkIG8uX2ltbWVkaWF0ZUZuKGZ1bmN0aW9uKCl7dmFyIHQ9MT09PWUuX3N0YXRlP24ub25GdWxmaWxsZWQ6bi5vblJlamVjdGVkO2lmKG51bGw9PT10KXJldHVybiB2b2lkKDE9PT1lLl9zdGF0ZT9yOnUpKG4ucHJvbWlzZSxlLl92YWx1ZSk7dmFyIG87dHJ5e289dChlLl92YWx1ZSl9Y2F0Y2goZSl7cmV0dXJuIHZvaWQgdShuLnByb21pc2UsZSl9cihuLnByb21pc2Usbyl9KSl9ZnVuY3Rpb24gcihlLG4pe3RyeXtpZihuPT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQSBwcm9taXNlIGNhbm5vdCBiZSByZXNvbHZlZCB3aXRoIGl0c2VsZi5cIik7aWYobiYmKFwib2JqZWN0XCI9PXR5cGVvZiBufHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBuKSl7dmFyIGk9bi50aGVuO2lmKG4gaW5zdGFuY2VvZiBvKXJldHVybiBlLl9zdGF0ZT0zLGUuX3ZhbHVlPW4sdm9pZCBmKGUpO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGkpcmV0dXJuIHZvaWQgcyh0KGksbiksZSl9ZS5fc3RhdGU9MSxlLl92YWx1ZT1uLGYoZSl9Y2F0Y2gobil7dShlLG4pfX1mdW5jdGlvbiB1KGUsbil7ZS5fc3RhdGU9MixlLl92YWx1ZT1uLGYoZSl9ZnVuY3Rpb24gZihlKXsyPT09ZS5fc3RhdGUmJjA9PT1lLl9kZWZlcnJlZHMubGVuZ3RoJiZvLl9pbW1lZGlhdGVGbihmdW5jdGlvbigpe2UuX2hhbmRsZWR8fG8uX3VuaGFuZGxlZFJlamVjdGlvbkZuKGUuX3ZhbHVlKX0pO2Zvcih2YXIgbj0wLHQ9ZS5fZGVmZXJyZWRzLmxlbmd0aDtuPHQ7bisrKWkoZSxlLl9kZWZlcnJlZHNbbl0pO2UuX2RlZmVycmVkcz1udWxsfWZ1bmN0aW9uIGMoZSxuLHQpe3RoaXMub25GdWxmaWxsZWQ9XCJmdW5jdGlvblwiPT10eXBlb2YgZT9lOm51bGwsdGhpcy5vblJlamVjdGVkPVwiZnVuY3Rpb25cIj09dHlwZW9mIG4/bjpudWxsLHRoaXMucHJvbWlzZT10fWZ1bmN0aW9uIHMoZSxuKXt2YXIgdD0hMTt0cnl7ZShmdW5jdGlvbihlKXt0fHwodD0hMCxyKG4sZSkpfSxmdW5jdGlvbihlKXt0fHwodD0hMCx1KG4sZSkpfSl9Y2F0Y2goZSl7aWYodClyZXR1cm47dD0hMCx1KG4sZSl9fXZhciBhPXNldFRpbWVvdXQ7by5wcm90b3R5cGUuY2F0Y2g9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMudGhlbihudWxsLGUpfSxvLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGUsdCl7dmFyIG89bmV3IHRoaXMuY29uc3RydWN0b3Iobik7cmV0dXJuIGkodGhpcyxuZXcgYyhlLHQsbykpLG99LG8uYWxsPWZ1bmN0aW9uKGUpe3ZhciBuPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGUpO3JldHVybiBuZXcgbyhmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIG8ocix1KXt0cnl7aWYodSYmKFwib2JqZWN0XCI9PXR5cGVvZiB1fHxcImZ1bmN0aW9uXCI9PXR5cGVvZiB1KSl7dmFyIGY9dS50aGVuO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGYpcmV0dXJuIHZvaWQgZi5jYWxsKHUsZnVuY3Rpb24oZSl7byhyLGUpfSx0KX1uW3JdPXUsMD09PS0taSYmZShuKX1jYXRjaChlKXt0KGUpfX1pZigwPT09bi5sZW5ndGgpcmV0dXJuIGUoW10pO2Zvcih2YXIgaT1uLmxlbmd0aCxyPTA7cjxuLmxlbmd0aDtyKyspbyhyLG5bcl0pfSl9LG8ucmVzb2x2ZT1mdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJvYmplY3RcIj09dHlwZW9mIGUmJmUuY29uc3RydWN0b3I9PT1vP2U6bmV3IG8oZnVuY3Rpb24obil7bihlKX0pfSxvLnJlamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IG8oZnVuY3Rpb24obix0KXt0KGUpfSl9LG8ucmFjZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IG8oZnVuY3Rpb24obix0KXtmb3IodmFyIG89MCxpPWUubGVuZ3RoO288aTtvKyspZVtvXS50aGVuKG4sdCl9KX0sby5faW1tZWRpYXRlRm49XCJmdW5jdGlvblwiPT10eXBlb2Ygc2V0SW1tZWRpYXRlJiZmdW5jdGlvbihlKXtzZXRJbW1lZGlhdGUoZSl9fHxmdW5jdGlvbihlKXthKGUsMCl9LG8uX3VuaGFuZGxlZFJlamVjdGlvbkZuPWZ1bmN0aW9uKGUpe1widW5kZWZpbmVkXCIhPXR5cGVvZiBjb25zb2xlJiZjb25zb2xlJiZjb25zb2xlLndhcm4oXCJQb3NzaWJsZSBVbmhhbmRsZWQgUHJvbWlzZSBSZWplY3Rpb246XCIsZSl9LG8uX3NldEltbWVkaWF0ZUZuPWZ1bmN0aW9uKGUpe28uX2ltbWVkaWF0ZUZuPWV9LG8uX3NldFVuaGFuZGxlZFJlamVjdGlvbkZuPWZ1bmN0aW9uKGUpe28uX3VuaGFuZGxlZFJlamVjdGlvbkZuPWV9LFwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGUmJm1vZHVsZS5leHBvcnRzP21vZHVsZS5leHBvcnRzPW86ZS5Qcm9taXNlfHwoZS5Qcm9taXNlPW8pfSh0aGlzKTsiXX0=