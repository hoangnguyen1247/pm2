"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _default;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _vizion = _interopRequireDefault(require("vizion"));

var _constants = _interopRequireDefault(require("../constants.js"));

var _eachLimit = _interopRequireDefault(require("async/eachLimit"));

var _debug = _interopRequireDefault(require("debug"));

var _domain = _interopRequireDefault(require("domain"));

var _cron = require("cron");

var _VersionCheck = _interopRequireDefault(require("./VersionCheck"));

var _package = _interopRequireDefault(require("../package.json"));

/**
 * Copyright 2013 the PM2 project authors. All rights reserved.
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */
var debug = (0, _debug["default"])('pm2:worker');

function _default(God) {
  var timer = null;
  God.CronJobs = new Map();
  God.Worker = {};
  God.Worker.is_running = false;

  God.getCronID = function (pm_id) {
    return "cron-".concat(pm_id);
  };

  God.registerCron = function (pm2_env) {
    if (!pm2_env || pm2_env.pm_id === undefined || !pm2_env.cron_restart || God.CronJobs.has(God.getCronID(pm2_env.pm_id))) return;
    console.log('[PM2][WORKER] Registering a cron job on:', pm2_env.pm_id);
    var job = new _cron.CronJob({
      cronTime: pm2_env.cron_restart,
      onTick: function onTick() {
        God.softReloadProcessId({
          id: pm2_env.pm_id
        }, function (err, data) {
          if (err) console.error(err.stack || err);
          return;
        });
      },
      start: false
    });
    job.start();
    God.CronJobs.set(God.getCronID(pm2_env.pm_id), job);
  };
  /**
   * Deletes the cron job on deletion of process
   */


  God.deleteCron = function (id) {
    if (typeof id !== 'undefined' && God.CronJobs.has(God.getCronID(id)) === false) return;
    console.log('[PM2] Deregistering a cron job on:', id);
    var job = God.CronJobs.get(God.getCronID(id));
    job.stop();
    God.CronJobs["delete"](God.getCronID(id));
  };

  var _getProcessById = function _getProcessById(pm_id) {
    var proc = God.clusters_db[pm_id];
    return proc ? proc : null;
  };

  var maxMemoryRestart = function maxMemoryRestart(proc_key, cb) {
    var proc = _getProcessById(proc_key.pm2_env.pm_id);

    if (!(proc && proc.pm2_env && proc_key.monit)) return cb();

    if (proc_key.monit.memory !== undefined && proc.pm2_env.max_memory_restart !== undefined && proc.pm2_env.max_memory_restart < proc_key.monit.memory && proc.pm2_env.axm_options && proc.pm2_env.axm_options.pid === undefined) {
      console.log('[PM2][WORKER] Process %s restarted because it exceeds --max-memory-restart value (current_memory=%s max_memory_limit=%s [octets])', proc.pm2_env.pm_id, proc_key.monit.memory, proc.pm2_env.max_memory_restart);
      God.softReloadProcessId({
        id: proc.pm2_env.pm_id
      }, function (err, data) {
        if (err) console.error(err.stack || err);
        return cb();
      });
    } else {
      return cb();
    }
  }; // Deprecated


  var versioningRefresh = function versioningRefresh(proc_key, cb) {
    var proc = _getProcessById(proc_key.pm2_env.pm_id);

    if (!(proc && proc.pm2_env && proc.pm2_env.vizion !== false && proc.pm2_env.vizion != "false" && proc.pm2_env.versioning && proc.pm2_env.versioning.repo_path)) {
      return cb();
    }

    if (proc.pm2_env.vizion_running === true) {
      debug('Vizion is already running for proc id: %d, skipping this round', proc.pm2_env.pm_id);
      return cb();
    }

    proc.pm2_env.vizion_running = true;
    var repo_path = proc.pm2_env.versioning.repo_path;

    _vizion["default"].analyze({
      folder: proc.pm2_env.versioning.repo_path
    }, function (err, meta) {
      if (err != null) return cb();
      proc = _getProcessById(proc_key.pm2_env.pm_id);

      if (!(proc && proc.pm2_env && proc.pm2_env.versioning && proc.pm2_env.versioning.repo_path)) {
        console.error('Proc not defined anymore or versioning unknown');
        return cb();
      }

      proc.pm2_env.vizion_running = false;
      meta.repo_path = repo_path;
      proc.pm2_env.versioning = meta;
      debug('[PM2][WORKER] %s parsed for versioning', proc.pm2_env.name);
      return cb();
    });
  };

  var tasks = function tasks() {
    if (God.Worker.is_running === true) {
      debug('[PM2][WORKER] Worker is already running, skipping this round');
      return false;
    }

    God.Worker.is_running = true;
    God.getMonitorData(null, function (err, data) {
      if (err || !data || (0, _typeof2["default"])(data) !== 'object') {
        God.Worker.is_running = false;
        return console.error(err);
      }

      (0, _eachLimit["default"])(data, 1, function (proc, next) {
        if (!proc || !proc.pm2_env || proc.pm2_env.pm_id === undefined) return next();
        debug('[PM2][WORKER] Processing proc id:', proc.pm2_env.pm_id); // Reset restart delay if application has an uptime of more > 30secs

        if (proc.pm2_env.exp_backoff_restart_delay !== undefined && proc.pm2_env.prev_restart_delay && proc.pm2_env.prev_restart_delay > 0) {
          var app_uptime = Date.now() - proc.pm2_env.pm_uptime;

          if (app_uptime > _constants["default"].EXP_BACKOFF_RESET_TIMER) {
            var ref_proc = _getProcessById(proc.pm2_env.pm_id);

            ref_proc.pm2_env.prev_restart_delay = 0;
            console.log("[PM2][WORKER] Reset the restart delay, as app ".concat(proc.name, " has been up for more than ").concat(_constants["default"].EXP_BACKOFF_RESET_TIMER, "ms"));
          }
        } // Check if application has reached memory threshold


        maxMemoryRestart(proc, function () {
          return next();
        });
      }, function (err) {
        God.Worker.is_running = false;
        debug('[PM2][WORKER] My job here is done, next job in %d seconds', parseInt(_constants["default"].WORKER_INTERVAL / 1000 + ""));
      });
    });
  };

  var wrappedTasks = function wrappedTasks() {
    var d = _domain["default"].create();

    d.once('error', function (err) {
      console.error('[PM2][WORKER] Error caught by domain:\n' + (err.stack || err));
      God.Worker.is_running = false;
    });
    d.run(function () {
      tasks();
    });
  };

  God.Worker.start = function () {
    timer = setInterval(wrappedTasks, _constants["default"].WORKER_INTERVAL);
    setInterval(function () {
      (0, _VersionCheck["default"])({
        state: 'check',
        version: _package["default"].version
      });
    }, 1000 * 60 * 60 * 24);
  };

  God.Worker.stop = function () {
    if (timer !== null) clearInterval(timer);
  };
}

;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Xb3JrZXIudHMiXSwibmFtZXMiOlsiZGVidWciLCJHb2QiLCJ0aW1lciIsIkNyb25Kb2JzIiwiTWFwIiwiV29ya2VyIiwiaXNfcnVubmluZyIsImdldENyb25JRCIsInBtX2lkIiwicmVnaXN0ZXJDcm9uIiwicG0yX2VudiIsInVuZGVmaW5lZCIsImNyb25fcmVzdGFydCIsImhhcyIsImNvbnNvbGUiLCJsb2ciLCJqb2IiLCJDcm9uSm9iIiwiY3JvblRpbWUiLCJvblRpY2siLCJzb2Z0UmVsb2FkUHJvY2Vzc0lkIiwiaWQiLCJlcnIiLCJkYXRhIiwiZXJyb3IiLCJzdGFjayIsInN0YXJ0Iiwic2V0IiwiZGVsZXRlQ3JvbiIsImdldCIsInN0b3AiLCJfZ2V0UHJvY2Vzc0J5SWQiLCJwcm9jIiwiY2x1c3RlcnNfZGIiLCJtYXhNZW1vcnlSZXN0YXJ0IiwicHJvY19rZXkiLCJjYiIsIm1vbml0IiwibWVtb3J5IiwibWF4X21lbW9yeV9yZXN0YXJ0IiwiYXhtX29wdGlvbnMiLCJwaWQiLCJ2ZXJzaW9uaW5nUmVmcmVzaCIsInZpemlvbiIsInZlcnNpb25pbmciLCJyZXBvX3BhdGgiLCJ2aXppb25fcnVubmluZyIsImFuYWx5emUiLCJmb2xkZXIiLCJtZXRhIiwibmFtZSIsInRhc2tzIiwiZ2V0TW9uaXRvckRhdGEiLCJuZXh0IiwiZXhwX2JhY2tvZmZfcmVzdGFydF9kZWxheSIsInByZXZfcmVzdGFydF9kZWxheSIsImFwcF91cHRpbWUiLCJEYXRlIiwibm93IiwicG1fdXB0aW1lIiwiY3N0IiwiRVhQX0JBQ0tPRkZfUkVTRVRfVElNRVIiLCJyZWZfcHJvYyIsInBhcnNlSW50IiwiV09SS0VSX0lOVEVSVkFMIiwid3JhcHBlZFRhc2tzIiwiZCIsImRvbWFpbiIsImNyZWF0ZSIsIm9uY2UiLCJydW4iLCJzZXRJbnRlcnZhbCIsInN0YXRlIiwidmVyc2lvbiIsInBrZyIsImNsZWFySW50ZXJ2YWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBS0E7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QUcsQ0FBQ0ksTUFBSixDQUFXeUIsSUFBWCxHQUFrQixZQUFZO0FBQzVCLFFBQUk1QixLQUFLLEtBQUssSUFBZCxFQUNFeUUsYUFBYSxDQUFDekUsS0FBRCxDQUFiO0FBQ0gsR0FIRDtBQUlEOztBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMyB0aGUgUE0yIHByb2plY3QgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS5cbiAqL1xuaW1wb3J0IHZpemlvbiBmcm9tICd2aXppb24nO1xuaW1wb3J0IGNzdCBmcm9tICcuLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IGVhY2hMaW1pdCBmcm9tICdhc3luYy9lYWNoTGltaXQnO1xuaW1wb3J0IGRlYnVnTG9nZ2VyIGZyb20gJ2RlYnVnJztcbmltcG9ydCBkb21haW4gZnJvbSAnZG9tYWluJztcbmltcG9ydCB7IENyb25Kb2IgfSBmcm9tICdjcm9uJztcbmltcG9ydCB2Q2hlY2sgZnJvbSAnLi9WZXJzaW9uQ2hlY2snO1xuaW1wb3J0IHBrZyBmcm9tICcuLi9wYWNrYWdlLmpzb24nO1xuXG52YXIgZGVidWcgPSBkZWJ1Z0xvZ2dlcigncG0yOndvcmtlcicpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoR29kKSB7XG4gIHZhciB0aW1lciA9IG51bGw7XG5cbiAgR29kLkNyb25Kb2JzID0gbmV3IE1hcCgpO1xuICBHb2QuV29ya2VyID0ge307XG4gIEdvZC5Xb3JrZXIuaXNfcnVubmluZyA9IGZhbHNlO1xuXG4gIEdvZC5nZXRDcm9uSUQgPSBmdW5jdGlvbiAocG1faWQpIHtcbiAgICByZXR1cm4gYGNyb24tJHtwbV9pZH1gXG4gIH1cblxuICBHb2QucmVnaXN0ZXJDcm9uID0gZnVuY3Rpb24gKHBtMl9lbnYpIHtcbiAgICBpZiAoIXBtMl9lbnYgfHxcbiAgICAgIHBtMl9lbnYucG1faWQgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgIXBtMl9lbnYuY3Jvbl9yZXN0YXJ0IHx8XG4gICAgICBHb2QuQ3JvbkpvYnMuaGFzKEdvZC5nZXRDcm9uSUQocG0yX2Vudi5wbV9pZCkpKVxuICAgICAgcmV0dXJuO1xuXG4gICAgY29uc29sZS5sb2coJ1tQTTJdW1dPUktFUl0gUmVnaXN0ZXJpbmcgYSBjcm9uIGpvYiBvbjonLCBwbTJfZW52LnBtX2lkKTtcblxuICAgIHZhciBqb2IgPSBuZXcgQ3JvbkpvYih7XG4gICAgICBjcm9uVGltZTogcG0yX2Vudi5jcm9uX3Jlc3RhcnQsXG4gICAgICBvblRpY2s6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgR29kLnNvZnRSZWxvYWRQcm9jZXNzSWQoeyBpZDogcG0yX2Vudi5wbV9pZCB9LCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7XG4gICAgICAgICAgaWYgKGVycilcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyLnN0YWNrIHx8IGVycik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBzdGFydDogZmFsc2VcbiAgICB9KTtcblxuICAgIGpvYi5zdGFydCgpO1xuICAgIEdvZC5Dcm9uSm9icy5zZXQoR29kLmdldENyb25JRChwbTJfZW52LnBtX2lkKSwgam9iKTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgdGhlIGNyb24gam9iIG9uIGRlbGV0aW9uIG9mIHByb2Nlc3NcbiAgICovXG4gIEdvZC5kZWxldGVDcm9uID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgaWYgKHR5cGVvZiAoaWQpICE9PSAndW5kZWZpbmVkJyAmJiBHb2QuQ3JvbkpvYnMuaGFzKEdvZC5nZXRDcm9uSUQoaWQpKSA9PT0gZmFsc2UpXG4gICAgICByZXR1cm47XG4gICAgY29uc29sZS5sb2coJ1tQTTJdIERlcmVnaXN0ZXJpbmcgYSBjcm9uIGpvYiBvbjonLCBpZCk7XG4gICAgdmFyIGpvYiA9IEdvZC5Dcm9uSm9icy5nZXQoR29kLmdldENyb25JRChpZCkpO1xuICAgIGpvYi5zdG9wKCk7XG4gICAgR29kLkNyb25Kb2JzLmRlbGV0ZShHb2QuZ2V0Q3JvbklEKGlkKSk7XG4gIH07XG5cbiAgdmFyIF9nZXRQcm9jZXNzQnlJZCA9IGZ1bmN0aW9uIChwbV9pZCkge1xuICAgIHZhciBwcm9jID0gR29kLmNsdXN0ZXJzX2RiW3BtX2lkXTtcbiAgICByZXR1cm4gcHJvYyA/IHByb2MgOiBudWxsO1xuICB9O1xuXG5cbiAgdmFyIG1heE1lbW9yeVJlc3RhcnQgPSBmdW5jdGlvbiAocHJvY19rZXksIGNiKSB7XG4gICAgdmFyIHByb2MgPSBfZ2V0UHJvY2Vzc0J5SWQocHJvY19rZXkucG0yX2Vudi5wbV9pZCk7XG5cbiAgICBpZiAoIShwcm9jICYmXG4gICAgICBwcm9jLnBtMl9lbnYgJiZcbiAgICAgIHByb2Nfa2V5Lm1vbml0KSlcbiAgICAgIHJldHVybiBjYigpO1xuXG4gICAgaWYgKHByb2Nfa2V5Lm1vbml0Lm1lbW9yeSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICBwcm9jLnBtMl9lbnYubWF4X21lbW9yeV9yZXN0YXJ0ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgIHByb2MucG0yX2Vudi5tYXhfbWVtb3J5X3Jlc3RhcnQgPCBwcm9jX2tleS5tb25pdC5tZW1vcnkgJiZcbiAgICAgIHByb2MucG0yX2Vudi5heG1fb3B0aW9ucyAmJlxuICAgICAgcHJvYy5wbTJfZW52LmF4bV9vcHRpb25zLnBpZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zb2xlLmxvZygnW1BNMl1bV09SS0VSXSBQcm9jZXNzICVzIHJlc3RhcnRlZCBiZWNhdXNlIGl0IGV4Y2VlZHMgLS1tYXgtbWVtb3J5LXJlc3RhcnQgdmFsdWUgKGN1cnJlbnRfbWVtb3J5PSVzIG1heF9tZW1vcnlfbGltaXQ9JXMgW29jdGV0c10pJywgcHJvYy5wbTJfZW52LnBtX2lkLCBwcm9jX2tleS5tb25pdC5tZW1vcnksIHByb2MucG0yX2Vudi5tYXhfbWVtb3J5X3Jlc3RhcnQpO1xuICAgICAgR29kLnNvZnRSZWxvYWRQcm9jZXNzSWQoe1xuICAgICAgICBpZDogcHJvYy5wbTJfZW52LnBtX2lkXG4gICAgICB9LCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7XG4gICAgICAgIGlmIChlcnIpXG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcnIuc3RhY2sgfHwgZXJyKTtcbiAgICAgICAgcmV0dXJuIGNiKCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXR1cm4gY2IoKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gRGVwcmVjYXRlZFxuICB2YXIgdmVyc2lvbmluZ1JlZnJlc2ggPSBmdW5jdGlvbiAocHJvY19rZXksIGNiKSB7XG4gICAgdmFyIHByb2MgPSBfZ2V0UHJvY2Vzc0J5SWQocHJvY19rZXkucG0yX2Vudi5wbV9pZCk7XG4gICAgaWYgKCEocHJvYyAmJlxuICAgICAgcHJvYy5wbTJfZW52ICYmXG4gICAgICAocHJvYy5wbTJfZW52LnZpemlvbiAhPT0gZmFsc2UgJiYgcHJvYy5wbTJfZW52LnZpemlvbiAhPSBcImZhbHNlXCIpICYmXG4gICAgICBwcm9jLnBtMl9lbnYudmVyc2lvbmluZyAmJlxuICAgICAgcHJvYy5wbTJfZW52LnZlcnNpb25pbmcucmVwb19wYXRoKSkge1xuICAgICAgcmV0dXJuIGNiKCk7XG4gICAgfVxuXG4gICAgaWYgKHByb2MucG0yX2Vudi52aXppb25fcnVubmluZyA9PT0gdHJ1ZSkge1xuICAgICAgZGVidWcoJ1ZpemlvbiBpcyBhbHJlYWR5IHJ1bm5pbmcgZm9yIHByb2MgaWQ6ICVkLCBza2lwcGluZyB0aGlzIHJvdW5kJywgcHJvYy5wbTJfZW52LnBtX2lkKTtcbiAgICAgIHJldHVybiBjYigpO1xuICAgIH1cblxuICAgIHByb2MucG0yX2Vudi52aXppb25fcnVubmluZyA9IHRydWU7XG4gICAgdmFyIHJlcG9fcGF0aCA9IHByb2MucG0yX2Vudi52ZXJzaW9uaW5nLnJlcG9fcGF0aDtcblxuICAgIHZpemlvbi5hbmFseXplKHtcbiAgICAgIGZvbGRlcjogcHJvYy5wbTJfZW52LnZlcnNpb25pbmcucmVwb19wYXRoXG4gICAgfSxcbiAgICAgIGZ1bmN0aW9uIChlcnIsIG1ldGEpIHtcbiAgICAgICAgaWYgKGVyciAhPSBudWxsKVxuICAgICAgICAgIHJldHVybiBjYigpO1xuXG4gICAgICAgIHByb2MgPSBfZ2V0UHJvY2Vzc0J5SWQocHJvY19rZXkucG0yX2Vudi5wbV9pZCk7XG5cbiAgICAgICAgaWYgKCEocHJvYyAmJlxuICAgICAgICAgIHByb2MucG0yX2VudiAmJlxuICAgICAgICAgIHByb2MucG0yX2Vudi52ZXJzaW9uaW5nICYmXG4gICAgICAgICAgcHJvYy5wbTJfZW52LnZlcnNpb25pbmcucmVwb19wYXRoKSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1Byb2Mgbm90IGRlZmluZWQgYW55bW9yZSBvciB2ZXJzaW9uaW5nIHVua25vd24nKTtcbiAgICAgICAgICByZXR1cm4gY2IoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb2MucG0yX2Vudi52aXppb25fcnVubmluZyA9IGZhbHNlO1xuICAgICAgICBtZXRhLnJlcG9fcGF0aCA9IHJlcG9fcGF0aDtcbiAgICAgICAgcHJvYy5wbTJfZW52LnZlcnNpb25pbmcgPSBtZXRhO1xuICAgICAgICBkZWJ1ZygnW1BNMl1bV09SS0VSXSAlcyBwYXJzZWQgZm9yIHZlcnNpb25pbmcnLCBwcm9jLnBtMl9lbnYubmFtZSk7XG4gICAgICAgIHJldHVybiBjYigpO1xuICAgICAgfSk7XG4gIH07XG5cbiAgdmFyIHRhc2tzID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChHb2QuV29ya2VyLmlzX3J1bm5pbmcgPT09IHRydWUpIHtcbiAgICAgIGRlYnVnKCdbUE0yXVtXT1JLRVJdIFdvcmtlciBpcyBhbHJlYWR5IHJ1bm5pbmcsIHNraXBwaW5nIHRoaXMgcm91bmQnKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgR29kLldvcmtlci5pc19ydW5uaW5nID0gdHJ1ZTtcblxuICAgIEdvZC5nZXRNb25pdG9yRGF0YShudWxsLCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7XG4gICAgICBpZiAoZXJyIHx8ICFkYXRhIHx8IHR5cGVvZiAoZGF0YSkgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIEdvZC5Xb3JrZXIuaXNfcnVubmluZyA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgfVxuXG4gICAgICBlYWNoTGltaXQoZGF0YSwgMSwgZnVuY3Rpb24gKHByb2MsIG5leHQpIHtcbiAgICAgICAgaWYgKCFwcm9jIHx8ICFwcm9jLnBtMl9lbnYgfHwgcHJvYy5wbTJfZW52LnBtX2lkID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgcmV0dXJuIG5leHQoKTtcblxuICAgICAgICBkZWJ1ZygnW1BNMl1bV09SS0VSXSBQcm9jZXNzaW5nIHByb2MgaWQ6JywgcHJvYy5wbTJfZW52LnBtX2lkKTtcblxuICAgICAgICAvLyBSZXNldCByZXN0YXJ0IGRlbGF5IGlmIGFwcGxpY2F0aW9uIGhhcyBhbiB1cHRpbWUgb2YgbW9yZSA+IDMwc2Vjc1xuICAgICAgICBpZiAocHJvYy5wbTJfZW52LmV4cF9iYWNrb2ZmX3Jlc3RhcnRfZGVsYXkgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgIHByb2MucG0yX2Vudi5wcmV2X3Jlc3RhcnRfZGVsYXkgJiYgcHJvYy5wbTJfZW52LnByZXZfcmVzdGFydF9kZWxheSA+IDApIHtcbiAgICAgICAgICB2YXIgYXBwX3VwdGltZSA9IERhdGUubm93KCkgLSBwcm9jLnBtMl9lbnYucG1fdXB0aW1lXG4gICAgICAgICAgaWYgKGFwcF91cHRpbWUgPiBjc3QuRVhQX0JBQ0tPRkZfUkVTRVRfVElNRVIpIHtcbiAgICAgICAgICAgIHZhciByZWZfcHJvYyA9IF9nZXRQcm9jZXNzQnlJZChwcm9jLnBtMl9lbnYucG1faWQpO1xuICAgICAgICAgICAgcmVmX3Byb2MucG0yX2Vudi5wcmV2X3Jlc3RhcnRfZGVsYXkgPSAwXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgW1BNMl1bV09SS0VSXSBSZXNldCB0aGUgcmVzdGFydCBkZWxheSwgYXMgYXBwICR7cHJvYy5uYW1lfSBoYXMgYmVlbiB1cCBmb3IgbW9yZSB0aGFuICR7Y3N0LkVYUF9CQUNLT0ZGX1JFU0VUX1RJTUVSfW1zYClcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBpZiBhcHBsaWNhdGlvbiBoYXMgcmVhY2hlZCBtZW1vcnkgdGhyZXNob2xkXG4gICAgICAgIG1heE1lbW9yeVJlc3RhcnQocHJvYywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBuZXh0KCk7XG4gICAgICAgIH0pO1xuICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICBHb2QuV29ya2VyLmlzX3J1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgZGVidWcoJ1tQTTJdW1dPUktFUl0gTXkgam9iIGhlcmUgaXMgZG9uZSwgbmV4dCBqb2IgaW4gJWQgc2Vjb25kcycsIHBhcnNlSW50KChjc3QuV09SS0VSX0lOVEVSVkFMIC8gMTAwMCkgKyBcIlwiKSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgd3JhcHBlZFRhc2tzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBkID0gZG9tYWluLmNyZWF0ZSgpO1xuXG4gICAgZC5vbmNlKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1tQTTJdW1dPUktFUl0gRXJyb3IgY2F1Z2h0IGJ5IGRvbWFpbjpcXG4nICsgKGVyci5zdGFjayB8fCBlcnIpKTtcbiAgICAgIEdvZC5Xb3JrZXIuaXNfcnVubmluZyA9IGZhbHNlO1xuICAgIH0pO1xuXG4gICAgZC5ydW4oZnVuY3Rpb24gKCkge1xuICAgICAgdGFza3MoKTtcbiAgICB9KTtcbiAgfTtcblxuXG4gIEdvZC5Xb3JrZXIuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGltZXIgPSBzZXRJbnRlcnZhbCh3cmFwcGVkVGFza3MsIGNzdC5XT1JLRVJfSU5URVJWQUwpO1xuXG4gICAgc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgdkNoZWNrKHtcbiAgICAgICAgc3RhdGU6ICdjaGVjaycsXG4gICAgICAgIHZlcnNpb246IHBrZy52ZXJzaW9uXG4gICAgICB9KVxuICAgIH0sIDEwMDAgKiA2MCAqIDYwICogMjQpXG4gIH07XG5cbiAgR29kLldvcmtlci5zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aW1lciAhPT0gbnVsbClcbiAgICAgIGNsZWFySW50ZXJ2YWwodGltZXIpO1xuICB9O1xufTtcbiJdfQ==