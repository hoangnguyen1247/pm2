"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard2 = _interopRequireDefault(require("@babel/runtime/helpers/interopRequireWildcard"));

var _url = _interopRequireDefault(require("url"));

var _ProcessUtils = _interopRequireDefault(require("./ProcessUtils"));

/**
* Copyright 2013 the PM2 project authors. All rights reserved.
* Use of this source code is governed by a license that
* can be found in the LICENSE file.
*/
// Inject custom modules
_ProcessUtils["default"].injectModules();

if (typeof process.env.source_map_support != "undefined" && process.env.source_map_support !== "false") {
  require('source-map-support').install();
} // Rename the process


process.title = process.env.PROCESS_TITLE || 'node ' + process.env.pm_exec_path;
if (process.connected && process.send && process.versions && process.versions.node) process.send({
  'node_version': process.versions.node
}); // Require the real application

if (process.env.pm_exec_path) {
  if (_ProcessUtils["default"].isESModule(process.env.pm_exec_path) === true) {
    Promise.resolve("".concat(_url["default"].pathToFileURL(process.env.pm_exec_path).toString())).then(function (s) {
      return (0, _interopRequireWildcard2["default"])(require(s));
    });
  } else require('module')._load(process.env.pm_exec_path, null, true);
} else throw new Error('Could not _load() the script'); // Change some values to make node think that the user's application
// was started directly such as `node app.js`


process.mainModule = process.mainModule || {};
process.mainModule.loaded = false;
require.main = process.mainModule;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Qcm9jZXNzQ29udGFpbmVyRm9yay50cyJdLCJuYW1lcyI6WyJQcm9jZXNzVXRpbHMiLCJpbmplY3RNb2R1bGVzIiwicHJvY2VzcyIsImVudiIsInNvdXJjZV9tYXBfc3VwcG9ydCIsInJlcXVpcmUiLCJpbnN0YWxsIiwidGl0bGUiLCJQUk9DRVNTX1RJVExFIiwicG1fZXhlY19wYXRoIiwiY29ubmVjdGVkIiwic2VuZCIsInZlcnNpb25zIiwibm9kZSIsImlzRVNNb2R1bGUiLCJ1cmwiLCJwYXRoVG9GaWxlVVJMIiwidG9TdHJpbmciLCJfbG9hZCIsIkVycm9yIiwibWFpbk1vZHVsZSIsImxvYWRlZCIsIm1haW4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUtBOztBQUVBOztBQVBFOzs7OztBQU1GO0FBRUFBLHlCQUFhQyxhQUFiOztBQUVBLElBQUksT0FBT0MsT0FBTyxDQUFDQyxHQUFSLENBQVlDLGtCQUFuQixJQUEwQyxXQUExQyxJQUNBRixPQUFPLENBQUNDLEdBQVIsQ0FBWUMsa0JBQVosS0FBbUMsT0FEdkMsRUFDZ0Q7QUFDOUNDLEVBQUFBLE9BQU8sQ0FBQyxvQkFBRCxDQUFQLENBQThCQyxPQUE5QjtBQUNELEMsQ0FFRDs7O0FBQ0FKLE9BQU8sQ0FBQ0ssS0FBUixHQUFnQkwsT0FBTyxDQUFDQyxHQUFSLENBQVlLLGFBQVosSUFBNkIsVUFBVU4sT0FBTyxDQUFDQyxHQUFSLENBQVlNLFlBQW5FO0FBRUEsSUFBSVAsT0FBTyxDQUFDUSxTQUFSLElBQ0FSLE9BQU8sQ0FBQ1MsSUFEUixJQUVBVCxPQUFPLENBQUNVLFFBRlIsSUFHQVYsT0FBTyxDQUFDVSxRQUFSLENBQWlCQyxJQUhyQixFQUlFWCxPQUFPLENBQUNTLElBQVIsQ0FBYTtBQUNYLGtCQUFnQlQsT0FBTyxDQUFDVSxRQUFSLENBQWlCQztBQUR0QixDQUFiLEUsQ0FJRjs7QUFDQSxJQUFJWCxPQUFPLENBQUNDLEdBQVIsQ0FBWU0sWUFBaEIsRUFBOEI7QUFDNUIsTUFBSVQseUJBQWFjLFVBQWIsQ0FBd0JaLE9BQU8sQ0FBQ0MsR0FBUixDQUFZTSxZQUFwQyxNQUFzRCxJQUExRCxFQUFnRTtBQUM5RCw4QkFBT00sZ0JBQUlDLGFBQUosQ0FBa0JkLE9BQU8sQ0FBQ0MsR0FBUixDQUFZTSxZQUE5QixFQUE0Q1EsUUFBNUMsRUFBUDtBQUFBO0FBQUE7QUFDRCxHQUZELE1BSUVaLE9BQU8sQ0FBQyxRQUFELENBQVAsQ0FBa0JhLEtBQWxCLENBQXdCaEIsT0FBTyxDQUFDQyxHQUFSLENBQVlNLFlBQXBDLEVBQWtELElBQWxELEVBQXdELElBQXhEO0FBQ0gsQ0FORCxNQVFFLE1BQU0sSUFBSVUsS0FBSixDQUFVLDhCQUFWLENBQU4sQyxDQUVGO0FBQ0E7OztBQUNBakIsT0FBTyxDQUFDa0IsVUFBUixHQUFxQmxCLE9BQU8sQ0FBQ2tCLFVBQVIsSUFBc0IsRUFBM0M7QUFDQWxCLE9BQU8sQ0FBQ2tCLFVBQVIsQ0FBbUJDLE1BQW5CLEdBQTRCLEtBQTVCO0FBQ0FoQixPQUFPLENBQUNpQixJQUFSLEdBQWVwQixPQUFPLENBQUNrQixVQUF2QiIsInNvdXJjZXNDb250ZW50IjpbIiAgLyoqXG4gKiBDb3B5cmlnaHQgMjAxMyB0aGUgUE0yIHByb2plY3QgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS5cbiAqL1xuaW1wb3J0IHVybCBmcm9tICd1cmwnO1xuLy8gSW5qZWN0IGN1c3RvbSBtb2R1bGVzXG5pbXBvcnQgUHJvY2Vzc1V0aWxzIGZyb20gJy4vUHJvY2Vzc1V0aWxzJ1xuUHJvY2Vzc1V0aWxzLmluamVjdE1vZHVsZXMoKVxuXG5pZiAodHlwZW9mKHByb2Nlc3MuZW52LnNvdXJjZV9tYXBfc3VwcG9ydCkgIT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgIHByb2Nlc3MuZW52LnNvdXJjZV9tYXBfc3VwcG9ydCAhPT0gXCJmYWxzZVwiKSB7XG4gIHJlcXVpcmUoJ3NvdXJjZS1tYXAtc3VwcG9ydCcpLmluc3RhbGwoKTtcbn1cblxuLy8gUmVuYW1lIHRoZSBwcm9jZXNzXG5wcm9jZXNzLnRpdGxlID0gcHJvY2Vzcy5lbnYuUFJPQ0VTU19USVRMRSB8fCAnbm9kZSAnICsgcHJvY2Vzcy5lbnYucG1fZXhlY19wYXRoO1xuXG5pZiAocHJvY2Vzcy5jb25uZWN0ZWQgJiZcbiAgICBwcm9jZXNzLnNlbmQgJiZcbiAgICBwcm9jZXNzLnZlcnNpb25zICYmXG4gICAgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlKVxuICBwcm9jZXNzLnNlbmQoe1xuICAgICdub2RlX3ZlcnNpb24nOiBwcm9jZXNzLnZlcnNpb25zLm5vZGVcbiAgfSk7XG5cbi8vIFJlcXVpcmUgdGhlIHJlYWwgYXBwbGljYXRpb25cbmlmIChwcm9jZXNzLmVudi5wbV9leGVjX3BhdGgpIHtcbiAgaWYgKFByb2Nlc3NVdGlscy5pc0VTTW9kdWxlKHByb2Nlc3MuZW52LnBtX2V4ZWNfcGF0aCkgPT09IHRydWUpIHtcbiAgICBpbXBvcnQodXJsLnBhdGhUb0ZpbGVVUkwocHJvY2Vzcy5lbnYucG1fZXhlY19wYXRoKS50b1N0cmluZygpKTtcbiAgfVxuICBlbHNlXG4gICAgcmVxdWlyZSgnbW9kdWxlJykuX2xvYWQocHJvY2Vzcy5lbnYucG1fZXhlY19wYXRoLCBudWxsLCB0cnVlKTtcbn1cbmVsc2VcbiAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgX2xvYWQoKSB0aGUgc2NyaXB0Jyk7XG5cbi8vIENoYW5nZSBzb21lIHZhbHVlcyB0byBtYWtlIG5vZGUgdGhpbmsgdGhhdCB0aGUgdXNlcidzIGFwcGxpY2F0aW9uXG4vLyB3YXMgc3RhcnRlZCBkaXJlY3RseSBzdWNoIGFzIGBub2RlIGFwcC5qc2BcbnByb2Nlc3MubWFpbk1vZHVsZSA9IHByb2Nlc3MubWFpbk1vZHVsZSB8fCB7fSBhcyBhbnk7XG5wcm9jZXNzLm1haW5Nb2R1bGUubG9hZGVkID0gZmFsc2U7XG5yZXF1aXJlLm1haW4gPSBwcm9jZXNzLm1haW5Nb2R1bGU7XG4iXX0=