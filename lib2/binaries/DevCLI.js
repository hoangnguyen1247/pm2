'use strict';

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _commander = _interopRequireDefault(require("commander"));

var _API = _interopRequireDefault(require("../API"));

var _Log = _interopRequireDefault(require("../API/Log"));

var _constants = _interopRequireDefault(require("../../constants"));

var _package = _interopRequireDefault(require("../../package.json"));

var _chalk = _interopRequireDefault(require("chalk"));

var _path = _interopRequireDefault(require("path"));

var fmt = _interopRequireWildcard(require("../tools/fmt"));

var _child_process = require("child_process");

var _os = _interopRequireDefault(require("os"));

process.env.PM2_NO_INTERACTION = 'true'; // Do not print banner

process.env.PM2_DISCRETE_MODE = "true";

_commander["default"].version(_package["default"].version).description('pm2-dev monitor for any file changes and automatically restart it').option('--raw', 'raw log output').option('--timestamp', 'print timestamp').option('--node-args <node_args>', 'space delimited arguments to pass to node in cluster mode - e.g. --node-args="--debug=7001 --trace-deprecation"').option('--ignore [files]', 'files to ignore while watching').option('--post-exec [cmd]', 'execute extra command after change detected').option('--silent-exec', 'do not output result of post command', false).option('--test-mode', 'debug mode for test suit').option('--interpreter <interpreter>', 'the interpreter pm2 should use for executing app (bash, python...)').option('--env [name]', 'select env_[name] env variables in process config file').option('--auto-exit', 'exit if all processes are errored/stopped or 0 apps launched').usage('pm2-dev app.js');

var pm2 = new _API["default"]({
  pm2_home: _path["default"].join(_os["default"].homedir ? _os["default"].homedir() : process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE, '.pm2-dev')
});
pm2.connect(function () {
  _commander["default"].parse(process.argv);
});

function postExecCmd(command, cb) {
  var exec_cmd = (0, _child_process.exec)(command);

  if (_commander["default"].silentExec !== true) {
    exec_cmd.stdout.on('data', function (data) {
      process.stdout.write(data);
    });
    exec_cmd.stderr.on('data', function (data) {
      process.stderr.write(data);
    });
  }

  exec_cmd.on('close', function done() {
    if (cb) cb(null);
  });
  exec_cmd.on('error', function (err) {
    console.error(err.stack || err);
  });
}

;

function run(cmd, opts) {
  var timestamp = opts.timestamp;
  opts.watch = true;
  opts.autorestart = true;
  opts.restart_delay = 1000;
  if (opts.autoExit) autoExit();

  if (opts.ignore) {
    opts.ignore_watch = opts.ignore.split(',');
    opts.ignore_watch.push('node_modules');
  }

  if (timestamp === true) timestamp = 'YYYY-MM-DD-HH:mm:ss';
  pm2.start(cmd, opts, function (err, procs) {
    if (err) {
      console.error(err);
      pm2.destroy(function () {
        process.exit(0);
      });
      return false;
    }

    if (opts.testMode) {
      return pm2.disconnect(function () {});
    }

    fmt.sep();
    fmt.title('PM2 development mode');
    fmt.field('Apps started', procs.map(function (p) {
      return p.pm2_env.name;
    }));
    fmt.field('Processes started', _chalk["default"].bold(procs.length));
    fmt.field('Watch and Restart', _chalk["default"].green('Enabled'));
    fmt.field('Ignored folder', opts.ignore_watch || 'node_modules');
    if (opts.postExec) fmt.field('Post restart cmd', opts.postExec);
    fmt.sep();
    setTimeout(function () {
      pm2.Client.launchBus(function (err, bus) {
        bus.on('process:event', function (packet) {
          if (packet.event == 'online') {
            if (opts.postExec) postExecCmd(opts.postExec);
          }
        });
      });
    }, 1000);

    _Log["default"].devStream(pm2.Client, 'all', opts.raw, timestamp, false);

    process.on('SIGINT', function () {
      console.log('>>>>> [PM2 DEV] Stopping current development session');
      pm2["delete"]('all', function () {
        pm2.destroy(function () {
          process.exit(0);
        });
      });
    });
  });
}

_commander["default"].command('*').action(function (cmd, opts) {
  run(cmd, _commander["default"]);
});

_commander["default"].command('start <file|json_file>').description('start target config file/script in development mode').action(function (cmd, opts) {
  run(cmd, _commander["default"]);
});

function exitPM2() {
  if (pm2 && pm2.connected == true) {
    console.log(_chalk["default"].green.bold('>>> Exiting PM2'));
    pm2.kill(function () {
      process.exit(0);
    });
  } else process.exit(0);
}

function autoExit(_final) {
  setTimeout(function () {
    pm2.list(function (err, apps) {
      if (err) console.error(err.stack || err);
      var online_count = 0;
      apps.forEach(function (app) {
        if (app.pm2_env.status == _constants["default"].ONLINE_STATUS || app.pm2_env.status == _constants["default"].LAUNCHING_STATUS) online_count++;
      });

      if (online_count == 0) {
        console.log('0 application online, exiting');
        if (_final == true) process.exit(1);else autoExit(true);
        return false;
      }

      autoExit(false);
    });
  }, 3000);
}

if (process.argv.length == 2) {
  _commander["default"].outputHelp();

  exitPM2();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,