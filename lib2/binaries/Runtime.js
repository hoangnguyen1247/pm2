"use strict";

var _commander = _interopRequireDefault(require("commander"));

var _API = _interopRequireDefault(require("../API"));

var _Log = _interopRequireDefault(require("../API/Log"));

var _constants = _interopRequireDefault(require("../../constants.js"));

var _package = _interopRequireDefault(require("../../package.json"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var pm2; // Do not print banner

process.env.PM2_DISCRETE_MODE = "true";

_commander["default"].version(_package["default"].version).description('pm2-runtime is an automatic pmx injection that runs in simulated no-daemon environment').option('--auto-manage', 'keep application online after command exit').option('--fast-boot', 'boot app faster by keeping pm2 runtime online in background (effective at second exit/start)').option('--web [port]', 'launch process web api on [port] default to 9615').option('--secret [key]', 'PM2 plus secret key').option('--public [key]', 'PM2 plus public key').option('--machine-name [name]', 'PM2 plus machine name').option('--env [name]', 'select env_[name] env variables in process config file').option('--watch', 'Watch and Restart').option('-i --instances <number>', 'launch [number] instances with load-balancer').usage('pm2-runtime app.js');

_commander["default"].command('*').action(function (cmd) {
  pm2 = new _API["default"]({
    pm2_home: _path["default"].join(process.env.HOME, '.pm3'),
    secret_key: _constants["default"].SECRET_KEY || _commander["default"].secret,
    public_key: _constants["default"].PUBLIC_KEY || _commander["default"]["public"],
    machine_name: _constants["default"].MACHINE_NAME || _commander["default"].machineName
  });
  pm2.connect(function () {
    if (_commander["default"].web) {
      var port = _commander["default"].web === true ? _constants["default"].WEB_PORT : _commander["default"].web;
      pm2.web(port);
    }

    pm2.start(cmd, _commander["default"], function (err, obj) {
      if (process.env.PM2_RUNTIME_DEBUG) {
        return pm2.disconnect(function () {});
      }

      if (err) {
        console.error(err);
        return process.exit(1);
      }

      var pm_id = obj[0].pm2_env.pm_id;

      if (_commander["default"].instances == undefined) {
        return pm2.attach(pm_id, function () {
          exitPM2();
        });
      }

      if (_commander["default"].json === true) _Log["default"].jsonStream(pm2.Client, pm_id);else if (_commander["default"].format === true) _Log["default"].formatStream(pm2.Client, pm_id, false, 'YYYY-MM-DD-HH:mm:ssZZ');else _Log["default"].stream(pm2.Client, 'all', true);
    });
  });
});

if (process.argv.length == 2) {
  _commander["default"].outputHelp();

  process.exit(1);
}

process.on('SIGINT', function () {
  exitPM2();
});
process.on('SIGTERM', function () {
  exitPM2();
});

_commander["default"].parse(process.argv);

function exitPM2() {
  console.log('Exited at %s', new Date());
  if (_commander["default"].autoManage) return process.exit(0);

  if (_commander["default"].fastBoot) {
    return pm2["delete"]('all', function () {
      process.exit(0);
    });
  }

  pm2.kill(function () {
    process.exit(0);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,